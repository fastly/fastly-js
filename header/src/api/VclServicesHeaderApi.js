/**
 * Header
 * Header objects are used to add, modify, or delete headers from requests and responses. The header content can be simple strings or be derived from variables inside Varnish. Regular expressions can be used to customize the headers even further.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesHeaderApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createHeaderObjectWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createHeaderObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createHeaderObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createHeaderObject(serviceId, versionId) {
      return this.createHeaderObjectWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteHeaderObjectWithHttpInfo(serviceId, versionId, headerName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteHeaderObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteHeaderObject");
      }
      // verify the required parameter 'headerName' is set
      if (headerName === undefined || headerName === null) {
        throw new Error("Missing the required parameter 'headerName' when calling deleteHeaderObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'header_name': headerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteHeaderObject(serviceId, versionId, headerName) {
      return this.deleteHeaderObjectWithHttpInfo(serviceId, versionId, headerName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getHeaderObjectWithHttpInfo(serviceId, versionId, headerName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getHeaderObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getHeaderObject");
      }
      // verify the required parameter 'headerName' is set
      if (headerName === undefined || headerName === null) {
        throw new Error("Missing the required parameter 'headerName' when calling getHeaderObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'header_name': headerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getHeaderObject(serviceId, versionId, headerName) {
      return this.getHeaderObjectWithHttpInfo(serviceId, versionId, headerName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listHeaderObjectsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listHeaderObjects");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listHeaderObjects");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listHeaderObjects(serviceId, versionId) {
      return this.listHeaderObjectsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateHeaderObjectWithHttpInfo(serviceId, versionId, headerName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateHeaderObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateHeaderObject");
      }
      // verify the required parameter 'headerName' is set
      if (headerName === undefined || headerName === null) {
        throw new Error("Missing the required parameter 'headerName' when calling updateHeaderObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'header_name': headerName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'action': opts['action'],
        'cache_condition': opts['cacheCondition'],
        'dst': opts['dst'],
        'ignore_if_set': opts['ignoreIfSet'],
        'name': opts['name'],
        'priority': opts['priority'],
        'regex': opts['regex'],
        'request_condition': opts['requestCondition'],
        'response_condition': opts['responseCondition'],
        'src': opts['src'],
        'substitution': opts['substitution'],
        'type': opts['type']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateHeaderObject(serviceId, versionId, headerName, opts) {
      return this.updateHeaderObjectWithHttpInfo(serviceId, versionId, headerName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
