/**
 * Header
 * Header objects are used to add, modify, or delete headers from requests and responses. The header content can be simple strings or be derived from variables inside Varnish. Regular expressions can be used to customize the headers even further.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Header);
  }
}(this, function(expect, Header) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Header.VclServicesHeaderApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VclServicesHeaderApi', function() {
    describe('createHeaderObject', function() {
      it('should call createHeaderObject successfully', function(done) {
        //uncomment below and update the code to test createHeaderObject
        //instance.createHeaderObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteHeaderObject', function() {
      it('should call deleteHeaderObject successfully', function(done) {
        //uncomment below and update the code to test deleteHeaderObject
        //instance.deleteHeaderObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getHeaderObject', function() {
      it('should call getHeaderObject successfully', function(done) {
        //uncomment below and update the code to test getHeaderObject
        //instance.getHeaderObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listHeaderObjects', function() {
      it('should call listHeaderObjects successfully', function(done) {
        //uncomment below and update the code to test listHeaderObjects
        //instance.listHeaderObjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateHeaderObject', function() {
      it('should call updateHeaderObject successfully', function(done) {
        //uncomment below and update the code to test updateHeaderObject
        //instance.updateHeaderObject(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
