/**
 * Director
 * A Director is responsible for balancing requests among a group of Backends. In addition to simply balancing, Directors can be configured to attempt retrying failed requests. Additionally, Directors have a quorum setting which can be used to determine when the Director as a whole is considered \"up\", in order to prevent \"server whack-a-mole\" following an outage as servers come back up. Only directors created via the API can be modified via the API. Directors known as \"autodirectors\" that are created automatically when load balancing groups of servers together cannot be modified or retrieved via the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Director);
  }
}(this, function(expect, Director) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ServiceServiceIdVersionVersionIdDirectorBackends', function() {
    it('should create an instance of ServiceServiceIdVersionVersionIdDirectorBackends', function() {
      // uncomment below and update the code to test ServiceServiceIdVersionVersionIdDirectorBackends
      //var instane = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be.a(Director.ServiceServiceIdVersionVersionIdDirectorBackends);
    });

    it('should have the property serviceId (base name: "service_id")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property autoLoadbalance (base name: "auto_loadbalance")', function() {
      // uncomment below and update the code to test the property autoLoadbalance
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property betweenBytesTimeout (base name: "between_bytes_timeout")', function() {
      // uncomment below and update the code to test the property betweenBytesTimeout
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property clientCert (base name: "client_cert")', function() {
      // uncomment below and update the code to test the property clientCert
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property comment (base name: "comment")', function() {
      // uncomment below and update the code to test the property comment
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property connectTimeout (base name: "connect_timeout")', function() {
      // uncomment below and update the code to test the property connectTimeout
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property firstByteTimeout (base name: "first_byte_timeout")', function() {
      // uncomment below and update the code to test the property firstByteTimeout
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property healthcheck (base name: "healthcheck")', function() {
      // uncomment below and update the code to test the property healthcheck
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property hostname (base name: "hostname")', function() {
      // uncomment below and update the code to test the property hostname
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property ipv4 (base name: "ipv4")', function() {
      // uncomment below and update the code to test the property ipv4
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property ipv6 (base name: "ipv6")', function() {
      // uncomment below and update the code to test the property ipv6
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property locked (base name: "locked")', function() {
      // uncomment below and update the code to test the property locked
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property maxConn (base name: "max_conn")', function() {
      // uncomment below and update the code to test the property maxConn
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property maxTlsVersion (base name: "max_tls_version")', function() {
      // uncomment below and update the code to test the property maxTlsVersion
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property minTlsVersion (base name: "min_tls_version")', function() {
      // uncomment below and update the code to test the property minTlsVersion
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property overrideHost (base name: "override_host")', function() {
      // uncomment below and update the code to test the property overrideHost
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property port (base name: "port")', function() {
      // uncomment below and update the code to test the property port
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property requestCondition (base name: "request_condition")', function() {
      // uncomment below and update the code to test the property requestCondition
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property shield (base name: "shield")', function() {
      // uncomment below and update the code to test the property shield
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslCaCert (base name: "ssl_ca_cert")', function() {
      // uncomment below and update the code to test the property sslCaCert
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslCertHostname (base name: "ssl_cert_hostname")', function() {
      // uncomment below and update the code to test the property sslCertHostname
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslCheckCert (base name: "ssl_check_cert")', function() {
      // uncomment below and update the code to test the property sslCheckCert
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslCiphers (base name: "ssl_ciphers")', function() {
      // uncomment below and update the code to test the property sslCiphers
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslClientCert (base name: "ssl_client_cert")', function() {
      // uncomment below and update the code to test the property sslClientCert
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslClientKey (base name: "ssl_client_key")', function() {
      // uncomment below and update the code to test the property sslClientKey
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslHostname (base name: "ssl_hostname")', function() {
      // uncomment below and update the code to test the property sslHostname
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property sslSniHostname (base name: "ssl_sni_hostname")', function() {
      // uncomment below and update the code to test the property sslSniHostname
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property useSsl (base name: "use_ssl")', function() {
      // uncomment below and update the code to test the property useSsl
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

    it('should have the property weight (base name: "weight")', function() {
      // uncomment below and update the code to test the property weight
      //var instance = new Director.ServiceServiceIdVersionVersionIdDirectorBackends();
      //expect(instance).to.be();
    });

  });

}));
