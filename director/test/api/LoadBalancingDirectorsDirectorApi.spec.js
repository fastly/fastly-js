/**
 * Director
 * A Director is responsible for balancing requests among a group of Backends. In addition to simply balancing, Directors can be configured to attempt retrying failed requests. Additionally, Directors have a quorum setting which can be used to determine when the Director as a whole is considered \"up\", in order to prevent \"server whack-a-mole\" following an outage as servers come back up. Only directors created via the API can be modified via the API. Directors known as \"autodirectors\" that are created automatically when load balancing groups of servers together cannot be modified or retrieved via the API.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Director);
  }
}(this, function(expect, Director) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Director.LoadBalancingDirectorsDirectorApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('LoadBalancingDirectorsDirectorApi', function() {
    describe('createDirector', function() {
      it('should call createDirector successfully', function(done) {
        //uncomment below and update the code to test createDirector
        //instance.createDirector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDirector', function() {
      it('should call deleteDirector successfully', function(done) {
        //uncomment below and update the code to test deleteDirector
        //instance.deleteDirector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDirector', function() {
      it('should call getDirector successfully', function(done) {
        //uncomment below and update the code to test getDirector
        //instance.getDirector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDirectors', function() {
      it('should call listDirectors successfully', function(done) {
        //uncomment below and update the code to test listDirectors
        //instance.listDirectors(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDirector', function() {
      it('should call updateDirector successfully', function(done) {
        //uncomment below and update the code to test updateDirector
        //instance.updateDirector(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
