/**
 * Director backend
 * Maps and relates backends as belonging to directors. Backends can belong to any number of directors but directors can only hold one reference to a specific backend.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class LoadBalancingDirectorsBackendApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName) {
      let postBody = null;
      // verify the required parameter 'directorName' is set
      if (directorName === undefined || directorName === null) {
        throw new Error("Missing the required parameter 'directorName' when calling createDirectorBackend");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createDirectorBackend");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createDirectorBackend");
      }
      // verify the required parameter 'backendName' is set
      if (backendName === undefined || backendName === null) {
        throw new Error("Missing the required parameter 'backendName' when calling createDirectorBackend");
      }

      let pathParams = {
        'director_name': directorName,
        'service_id': serviceId,
        'version_id': versionId,
        'backend_name': backendName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/director/{director_name}/backend/{backend_name}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createDirectorBackend(directorName, serviceId, versionId, backendName) {
      return this.createDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName) {
      let postBody = null;
      // verify the required parameter 'directorName' is set
      if (directorName === undefined || directorName === null) {
        throw new Error("Missing the required parameter 'directorName' when calling deleteDirectorBackend");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteDirectorBackend");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteDirectorBackend");
      }
      // verify the required parameter 'backendName' is set
      if (backendName === undefined || backendName === null) {
        throw new Error("Missing the required parameter 'backendName' when calling deleteDirectorBackend");
      }

      let pathParams = {
        'director_name': directorName,
        'service_id': serviceId,
        'version_id': versionId,
        'backend_name': backendName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/director/{director_name}/backend/{backend_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteDirectorBackend(directorName, serviceId, versionId, backendName) {
      return this.deleteDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName) {
      let postBody = null;
      // verify the required parameter 'directorName' is set
      if (directorName === undefined || directorName === null) {
        throw new Error("Missing the required parameter 'directorName' when calling getDirectorBackend");
      }
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getDirectorBackend");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getDirectorBackend");
      }
      // verify the required parameter 'backendName' is set
      if (backendName === undefined || backendName === null) {
        throw new Error("Missing the required parameter 'backendName' when calling getDirectorBackend");
      }

      let pathParams = {
        'director_name': directorName,
        'service_id': serviceId,
        'version_id': versionId,
        'backend_name': backendName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/director/{director_name}/backend/{backend_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDirectorBackend(directorName, serviceId, versionId, backendName) {
      return this.getDirectorBackendWithHttpInfo(directorName, serviceId, versionId, backendName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
