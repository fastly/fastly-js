/**
 * Domain
 * A domain represents the domain name through which visitors will retrieve content. There can be multiple domains for a service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';
import OneOfobjectstringboolean from '../model/OneOfobjectstringboolean';


export default class ServicesDomainApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    checkDomainWithHttpInfo(serviceId, versionId, domainName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling checkDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling checkDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling checkDomain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OneOfobjectstringboolean];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    checkDomain(serviceId, versionId, domainName) {
      return this.checkDomainWithHttpInfo(serviceId, versionId, domainName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    checkDomainsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling checkDomains");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling checkDomains");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [[OneOfobjectstringboolean]];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/check_all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    checkDomains(serviceId, versionId) {
      return this.checkDomainsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    createDomainWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createDomain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'comment': opts['comment'],
        'name': opts['name']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createDomain(serviceId, versionId, opts) {
      return this.createDomainWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteDomainWithHttpInfo(serviceId, versionId, domainName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling deleteDomain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteDomain(serviceId, versionId, domainName) {
      return this.deleteDomainWithHttpInfo(serviceId, versionId, domainName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getDomainWithHttpInfo(serviceId, versionId, domainName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling getDomain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDomain(serviceId, versionId, domainName) {
      return this.getDomainWithHttpInfo(serviceId, versionId, domainName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listDomainsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listDomains");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listDomains");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listDomains(serviceId, versionId) {
      return this.listDomainsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateDomainWithHttpInfo(serviceId, versionId, domainName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateDomain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateDomain");
      }
      // verify the required parameter 'domainName' is set
      if (domainName === undefined || domainName === null) {
        throw new Error("Missing the required parameter 'domainName' when calling updateDomain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'domain_name': domainName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'comment': opts['comment'],
        'name': opts['name']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateDomain(serviceId, versionId, domainName, opts) {
      return this.updateDomainWithHttpInfo(serviceId, versionId, domainName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
