/**
 * Healthcheck
 * Healthchecks are used to customize the way Fastly checks on your Backends. If an origin server is marked unhealthy due to health checks, Fastly will stop attempting to send requests to it. If all origin servers are marked unhealthy, Fastly will attempt to serve stale. If no stale object is available, a 503 will be returned to the client.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class ServicesHealthcheckApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createHealthcheckWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createHealthcheck");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createHealthcheck");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'check_interval': opts['checkInterval'],
        'comment': opts['comment'],
        'expected_response': opts['expectedResponse'],
        'host': opts['host'],
        'http_version': opts['httpVersion'],
        'initial': opts['initial'],
        'method': opts['method'],
        'name': opts['name'],
        'path': opts['path'],
        'threshold': opts['threshold'],
        'timeout': opts['timeout'],
        'window': opts['window']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/healthcheck', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createHealthcheck(serviceId, versionId, opts) {
      return this.createHealthcheckWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteHealthcheck");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteHealthcheck");
      }
      // verify the required parameter 'healthcheckName' is set
      if (healthcheckName === undefined || healthcheckName === null) {
        throw new Error("Missing the required parameter 'healthcheckName' when calling deleteHealthcheck");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'healthcheck_name': healthcheckName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteHealthcheck(serviceId, versionId, healthcheckName) {
      return this.deleteHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getHealthcheck");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getHealthcheck");
      }
      // verify the required parameter 'healthcheckName' is set
      if (healthcheckName === undefined || healthcheckName === null) {
        throw new Error("Missing the required parameter 'healthcheckName' when calling getHealthcheck");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'healthcheck_name': healthcheckName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getHealthcheck(serviceId, versionId, healthcheckName) {
      return this.getHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listHealthchecksWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listHealthchecks");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listHealthchecks");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/healthcheck', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listHealthchecks(serviceId, versionId) {
      return this.listHealthchecksWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateHealthcheck");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateHealthcheck");
      }
      // verify the required parameter 'healthcheckName' is set
      if (healthcheckName === undefined || healthcheckName === null) {
        throw new Error("Missing the required parameter 'healthcheckName' when calling updateHealthcheck");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'healthcheck_name': healthcheckName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'check_interval': opts['checkInterval'],
        'comment': opts['comment'],
        'expected_response': opts['expectedResponse'],
        'host': opts['host'],
        'http_version': opts['httpVersion'],
        'initial': opts['initial'],
        'method': opts['method'],
        'name': opts['name'],
        'path': opts['path'],
        'threshold': opts['threshold'],
        'timeout': opts['timeout'],
        'window': opts['window']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/healthcheck/{healthcheck_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateHealthcheck(serviceId, versionId, healthcheckName, opts) {
      return this.updateHealthcheckWithHttpInfo(serviceId, versionId, healthcheckName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
