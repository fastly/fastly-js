/**
 * HTTPS
 * Fastly will upload log messages to an HTTPS endpoint in the format specified in the HTTPS object. The HTTPS endpoint requires proof of domain ownership before logs can be received. Learn how to validate your domain in our [HTTPS endpoint documentation](https://docs.fastly.com/en/guides/log-streaming-https).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingHttpsApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogHttpsWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogHttps");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogHttps");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'tls_ca_cert': opts['tlsCaCert'],
        'tls_client_cert': opts['tlsClientCert'],
        'tls_client_key': opts['tlsClientKey'],
        'tls_hostname': opts['tlsHostname'],
        'request_max_entries': opts['requestMaxEntries'],
        'request_max_bytes': opts['requestMaxBytes'],
        'url': opts['url'],
        'content_type': opts['contentType'],
        'header_name': opts['headerName'],
        'message_type': opts['messageType'],
        'header_value': opts['headerValue'],
        'method': opts['method'],
        'json_format': opts['jsonFormat']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/https', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogHttps(serviceId, versionId, opts) {
      return this.createLogHttpsWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLogHttps");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLogHttps");
      }
      // verify the required parameter 'loggingHttpsName' is set
      if (loggingHttpsName === undefined || loggingHttpsName === null) {
        throw new Error("Missing the required parameter 'loggingHttpsName' when calling deleteLogHttps");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_https_name': loggingHttpsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/https/{logging_https_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLogHttps(serviceId, versionId, loggingHttpsName) {
      return this.deleteLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogHttps");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogHttps");
      }
      // verify the required parameter 'loggingHttpsName' is set
      if (loggingHttpsName === undefined || loggingHttpsName === null) {
        throw new Error("Missing the required parameter 'loggingHttpsName' when calling getLogHttps");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_https_name': loggingHttpsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/https/{logging_https_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogHttps(serviceId, versionId, loggingHttpsName) {
      return this.getLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogHttpsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogHttps");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogHttps");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/https', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogHttps(serviceId, versionId) {
      return this.listLogHttpsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogHttps");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogHttps");
      }
      // verify the required parameter 'loggingHttpsName' is set
      if (loggingHttpsName === undefined || loggingHttpsName === null) {
        throw new Error("Missing the required parameter 'loggingHttpsName' when calling updateLogHttps");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_https_name': loggingHttpsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'tls_ca_cert': opts['tlsCaCert'],
        'tls_client_cert': opts['tlsClientCert'],
        'tls_client_key': opts['tlsClientKey'],
        'tls_hostname': opts['tlsHostname'],
        'request_max_entries': opts['requestMaxEntries'],
        'request_max_bytes': opts['requestMaxBytes'],
        'url': opts['url'],
        'content_type': opts['contentType'],
        'header_name': opts['headerName'],
        'message_type': opts['messageType'],
        'header_value': opts['headerValue'],
        'method': opts['method'],
        'json_format': opts['jsonFormat']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/https/{logging_https_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogHttps(serviceId, versionId, loggingHttpsName, opts) {
      return this.updateLogHttpsWithHttpInfo(serviceId, versionId, loggingHttpsName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
