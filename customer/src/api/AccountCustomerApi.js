/**
 * Customer
 * A Customer is the base object that owns your Users and Services.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';


export default class AccountCustomerApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    deleteCustomerWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/customer/{customer_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteCustomer(customerId) {
      return this.deleteCustomerWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomerWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/customer/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomer(customerId) {
      return this.getCustomerWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLoggedInCustomerWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/current_customer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLoggedInCustomer() {
      return this.getLoggedInCustomerWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listUsersWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling listUsers");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/customer/{customer_id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listUsers(customerId) {
      return this.listUsersWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateCustomerWithHttpInfo(customerId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateCustomer");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'billing_contact_id': opts['billingContactId'],
        'billing_network_type': opts['billingNetworkType'],
        'billing_ref': opts['billingRef'],
        'can_configure_wordpress': opts['canConfigureWordpress'],
        'can_reset_passwords': opts['canResetPasswords'],
        'can_upload_vcl': opts['canUploadVcl'],
        'force_2fa': opts['force2fa'],
        'force_sso': opts['forceSso'],
        'has_account_panel': opts['hasAccountPanel'],
        'has_improved_events': opts['hasImprovedEvents'],
        'has_improved_ssl_config': opts['hasImprovedSslConfig'],
        'has_openstack_logging': opts['hasOpenstackLogging'],
        'has_pci': opts['hasPci'],
        'has_pci_passwords': opts['hasPciPasswords'],
        'id': opts['id'],
        'ip_whitelist': opts['ipWhitelist'],
        'legal_contact_id': opts['legalContactId'],
        'name': opts['name'],
        'owner_id': opts['ownerId'],
        'phone_number': opts['phoneNumber'],
        'postal_address': opts['postalAddress'],
        'pricing_plan': opts['pricingPlan'],
        'pricing_plan_id': opts['pricingPlanId'],
        'security_contact_id': opts['securityContactId'],
        'technical_contact_id': opts['technicalContactId']
      };

      let authNames = ['session_or_token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/customer/{customer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateCustomer(customerId, opts) {
      return this.updateCustomerWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
