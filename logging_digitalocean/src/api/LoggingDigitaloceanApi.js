/**
 * DigitalOcean Spaces
 * Fastly will upload log messages to the DigitalOcean Space in the format specified in the DigitalOcean Spaces object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingDigitaloceanApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogDigoceanWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogDigocean");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogDigocean");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'message_type': opts['messageType'],
        'timestamp_format': opts['timestampFormat'],
        'period': opts['period'],
        'gzip_level': opts['gzipLevel'],
        'compression_codec': opts['compressionCodec'],
        'bucket_name': opts['bucketName'],
        'access_key': opts['accessKey'],
        'secret_key': opts['secretKey'],
        'domain': opts['domain'],
        'path': opts['path'],
        'public_key': opts['publicKey']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/digitalocean', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogDigocean(serviceId, versionId, opts) {
      return this.createLogDigoceanWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLogDigocean");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLogDigocean");
      }
      // verify the required parameter 'loggingDigitaloceanName' is set
      if (loggingDigitaloceanName === undefined || loggingDigitaloceanName === null) {
        throw new Error("Missing the required parameter 'loggingDigitaloceanName' when calling deleteLogDigocean");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_digitalocean_name': loggingDigitaloceanName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/digitalocean/{logging_digitalocean_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLogDigocean(serviceId, versionId, loggingDigitaloceanName) {
      return this.deleteLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogDigocean");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogDigocean");
      }
      // verify the required parameter 'loggingDigitaloceanName' is set
      if (loggingDigitaloceanName === undefined || loggingDigitaloceanName === null) {
        throw new Error("Missing the required parameter 'loggingDigitaloceanName' when calling getLogDigocean");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_digitalocean_name': loggingDigitaloceanName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/digitalocean/{logging_digitalocean_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogDigocean(serviceId, versionId, loggingDigitaloceanName) {
      return this.getLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogDigoceanWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogDigocean");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogDigocean");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/digitalocean', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogDigocean(serviceId, versionId) {
      return this.listLogDigoceanWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogDigocean");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogDigocean");
      }
      // verify the required parameter 'loggingDigitaloceanName' is set
      if (loggingDigitaloceanName === undefined || loggingDigitaloceanName === null) {
        throw new Error("Missing the required parameter 'loggingDigitaloceanName' when calling updateLogDigocean");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_digitalocean_name': loggingDigitaloceanName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'message_type': opts['messageType'],
        'timestamp_format': opts['timestampFormat'],
        'period': opts['period'],
        'gzip_level': opts['gzipLevel'],
        'compression_codec': opts['compressionCodec'],
        'bucket_name': opts['bucketName'],
        'access_key': opts['accessKey'],
        'secret_key': opts['secretKey'],
        'domain': opts['domain'],
        'path': opts['path'],
        'public_key': opts['publicKey']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/digitalocean/{logging_digitalocean_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogDigocean(serviceId, versionId, loggingDigitaloceanName, opts) {
      return this.updateLogDigoceanWithHttpInfo(serviceId, versionId, loggingDigitaloceanName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
