/**
 * Tokens
 * An API Token is used to identify who the API call is made on behalf of. It can also be used to restrict what an app can do through authorization scope. Users can create multiple tokens to suit their needs.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Tokens);
  }
}(this, function(expect, Tokens) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Tokens.AuthApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuthApi', function() {
    describe('bulkRevokeTokens', function() {
      it('should call bulkRevokeTokens successfully', function(done) {
        //uncomment below and update the code to test bulkRevokeTokens
        //instance.bulkRevokeTokens(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createToken', function() {
      it('should call createToken successfully', function(done) {
        //uncomment below and update the code to test createToken
        //instance.createToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getTokenCurrent', function() {
      it('should call getTokenCurrent successfully', function(done) {
        //uncomment below and update the code to test getTokenCurrent
        //instance.getTokenCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTokensCustomer', function() {
      it('should call listTokensCustomer successfully', function(done) {
        //uncomment below and update the code to test listTokensCustomer
        //instance.listTokensCustomer(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listTokensUser', function() {
      it('should call listTokensUser successfully', function(done) {
        //uncomment below and update the code to test listTokensUser
        //instance.listTokensUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeToken', function() {
      it('should call revokeToken successfully', function(done) {
        //uncomment below and update the code to test revokeToken
        //instance.revokeToken(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('revokeTokenCurrent', function() {
      it('should call revokeTokenCurrent successfully', function(done) {
        //uncomment below and update the code to test revokeTokenCurrent
        //instance.revokeTokenCurrent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
