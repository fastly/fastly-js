/**
 * VCL
 * A VCL is a Varnish configuration file used to customize the configuration for a Service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesVclApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createCustomVclWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createCustomVcl");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createCustomVcl");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createCustomVcl(serviceId, versionId) {
      return this.createCustomVclWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteCustomVclWithHttpInfo(serviceId, versionId, vclName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteCustomVcl");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCustomVcl");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling deleteCustomVcl");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteCustomVcl(serviceId, versionId, vclName) {
      return this.deleteCustomVclWithHttpInfo(serviceId, versionId, vclName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclWithHttpInfo(serviceId, versionId, vclName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVcl");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVcl");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling getCustomVcl");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
        'no_content': opts['noContent']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVcl(serviceId, versionId, vclName, opts) {
      return this.getCustomVclWithHttpInfo(serviceId, versionId, vclName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclBoilerplateWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVclBoilerplate");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVclBoilerplate");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/boilerplate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclBoilerplate(serviceId, versionId) {
      return this.getCustomVclBoilerplateWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclGeneratedWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVclGenerated");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVclGenerated");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/generated_vcl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclGenerated(serviceId, versionId) {
      return this.getCustomVclGeneratedWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclGeneratedHighlightedWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVclGeneratedHighlighted");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVclGeneratedHighlighted");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/generated_vcl/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclGeneratedHighlighted(serviceId, versionId) {
      return this.getCustomVclGeneratedHighlightedWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclHighlightedWithHttpInfo(serviceId, versionId, vclName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVclHighlighted");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVclHighlighted");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling getCustomVclHighlighted");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclHighlighted(serviceId, versionId, vclName) {
      return this.getCustomVclHighlightedWithHttpInfo(serviceId, versionId, vclName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclRawWithHttpInfo(serviceId, versionId, vclName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCustomVclRaw");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCustomVclRaw");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling getCustomVclRaw");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclRaw(serviceId, versionId, vclName) {
      return this.getCustomVclRawWithHttpInfo(serviceId, versionId, vclName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listCustomVclWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listCustomVcl");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listCustomVcl");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listCustomVcl(serviceId, versionId) {
      return this.listCustomVclWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    setCustomVclMainWithHttpInfo(serviceId, versionId, vclName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling setCustomVclMain");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling setCustomVclMain");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling setCustomVclMain");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/main', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    setCustomVclMain(serviceId, versionId, vclName) {
      return this.setCustomVclMainWithHttpInfo(serviceId, versionId, vclName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateCustomVclWithHttpInfo(serviceId, versionId, vclName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateCustomVcl");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateCustomVcl");
      }
      // verify the required parameter 'vclName' is set
      if (vclName === undefined || vclName === null) {
        throw new Error("Missing the required parameter 'vclName' when calling updateCustomVcl");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'vcl_name': vclName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateCustomVcl(serviceId, versionId, vclName) {
      return this.updateCustomVclWithHttpInfo(serviceId, versionId, vclName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
