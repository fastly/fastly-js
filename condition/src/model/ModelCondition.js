/**
 * Condition
 * Conditions are used to control whether logic defined in configured VCL objects is applied for a particular client request. A condition contains a VCL conditional expression that evaluates to either true or false and is used to determine whether the condition is met. The type of the condition determines where it is executed and the VCL variables that can be evaluated as part of the conditional logic.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ModelCondition {
    
    constructor() { 
        
        ModelCondition.initialize(this);
    }

    
    static initialize(obj) { 
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelCondition();

            if (data.hasOwnProperty('service_id')) {
                obj['service_id'] = ApiClient.convertToType(data['service_id'], 'String');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('priority')) {
                obj['priority'] = ApiClient.convertToType(data['priority'], 'Number');
            }
            if (data.hasOwnProperty('statement')) {
                obj['statement'] = ApiClient.convertToType(data['statement'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }


}


ModelCondition.prototype['service_id'] = undefined;


ModelCondition.prototype['version'] = undefined;


ModelCondition.prototype['comment'] = '';


ModelCondition.prototype['name'] = undefined;


ModelCondition.prototype['priority'] = 100;


ModelCondition.prototype['statement'] = undefined;


ModelCondition.prototype['type'] = undefined;






ModelCondition['TypeEnum'] = {

    
    "request": "request",

    
    "cache": "cache",

    
    "response": "response",

    
    "prefetch": "prefetch"
};



export default ModelCondition;

