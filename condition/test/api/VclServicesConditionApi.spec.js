/**
 * Condition
 * Conditions are used to control whether logic defined in configured VCL objects is applied for a particular client request. A condition contains a VCL conditional expression that evaluates to either true or false and is used to determine whether the condition is met. The type of the condition determines where it is executed and the VCL variables that can be evaluated as part of the conditional logic.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Condition);
  }
}(this, function(expect, Condition) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Condition.VclServicesConditionApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('VclServicesConditionApi', function() {
    describe('createCondition', function() {
      it('should call createCondition successfully', function(done) {
        //uncomment below and update the code to test createCondition
        //instance.createCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCondition', function() {
      it('should call deleteCondition successfully', function(done) {
        //uncomment below and update the code to test deleteCondition
        //instance.deleteCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCondition', function() {
      it('should call getCondition successfully', function(done) {
        //uncomment below and update the code to test getCondition
        //instance.getCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listConditions', function() {
      it('should call listConditions successfully', function(done) {
        //uncomment below and update the code to test listConditions
        //instance.listConditions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateCondition', function() {
      it('should call updateCondition successfully', function(done) {
        //uncomment below and update the code to test updateCondition
        //instance.updateCondition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
