/**
 * Papertrail
 * Fastly will stream log messages to the Papertrail account in the format specified in the Papertrail object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingPapertrailApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogPapertrailWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogPapertrail");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogPapertrail");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'address': opts['address'],
        'port': opts['port']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/papertrail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogPapertrail(serviceId, versionId, opts) {
      return this.createLogPapertrailWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLogPapertrail");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLogPapertrail");
      }
      // verify the required parameter 'loggingPapertrailName' is set
      if (loggingPapertrailName === undefined || loggingPapertrailName === null) {
        throw new Error("Missing the required parameter 'loggingPapertrailName' when calling deleteLogPapertrail");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_papertrail_name': loggingPapertrailName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/papertrail/{logging_papertrail_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLogPapertrail(serviceId, versionId, loggingPapertrailName) {
      return this.deleteLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogPapertrail");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogPapertrail");
      }
      // verify the required parameter 'loggingPapertrailName' is set
      if (loggingPapertrailName === undefined || loggingPapertrailName === null) {
        throw new Error("Missing the required parameter 'loggingPapertrailName' when calling getLogPapertrail");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_papertrail_name': loggingPapertrailName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/papertrail/{logging_papertrail_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogPapertrail(serviceId, versionId, loggingPapertrailName) {
      return this.getLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogPapertrailWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogPapertrail");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogPapertrail");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/papertrail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogPapertrail(serviceId, versionId) {
      return this.listLogPapertrailWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogPapertrail");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogPapertrail");
      }
      // verify the required parameter 'loggingPapertrailName' is set
      if (loggingPapertrailName === undefined || loggingPapertrailName === null) {
        throw new Error("Missing the required parameter 'loggingPapertrailName' when calling updateLogPapertrail");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_papertrail_name': loggingPapertrailName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'address': opts['address'],
        'port': opts['port']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/papertrail/{logging_papertrail_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogPapertrail(serviceId, versionId, loggingPapertrailName, opts) {
      return this.updateLogPapertrailWithHttpInfo(serviceId, versionId, loggingPapertrailName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
