/**
 * Real-time analytics
 * The real-time analytics API offers a standardized set of data about traffic received by a specified service in one-second time periods up to the last complete second.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";


export default class MetricsStatsRealtimeApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    getStatsLast120SecondsWithHttpInfo(serviceId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getStatsLast120Seconds");
      }

      let pathParams = {
        'service_id': serviceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/channel/{service_id}/ts/h', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getStatsLast120Seconds(serviceId) {
      return this.getStatsLast120SecondsWithHttpInfo(serviceId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getStatsLast120SecondsLimitEntriesWithHttpInfo(serviceId, maxEntries) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getStatsLast120SecondsLimitEntries");
      }
      // verify the required parameter 'maxEntries' is set
      if (maxEntries === undefined || maxEntries === null) {
        throw new Error("Missing the required parameter 'maxEntries' when calling getStatsLast120SecondsLimitEntries");
      }

      let pathParams = {
        'service_id': serviceId,
        'max_entries': maxEntries
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/channel/{service_id}/ts/h/limit/{max_entries}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getStatsLast120SecondsLimitEntries(serviceId, maxEntries) {
      return this.getStatsLast120SecondsLimitEntriesWithHttpInfo(serviceId, maxEntries)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getStatsLastSecondWithHttpInfo(serviceId, timestampInSeconds) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getStatsLastSecond");
      }
      // verify the required parameter 'timestampInSeconds' is set
      if (timestampInSeconds === undefined || timestampInSeconds === null) {
        throw new Error("Missing the required parameter 'timestampInSeconds' when calling getStatsLastSecond");
      }

      let pathParams = {
        'service_id': serviceId,
        'timestamp_in_seconds': timestampInSeconds
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v1/channel/{service_id}/ts/{timestamp_in_seconds}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getStatsLastSecond(serviceId, timestampInSeconds) {
      return this.getStatsLastSecondWithHttpInfo(serviceId, timestampInSeconds)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
