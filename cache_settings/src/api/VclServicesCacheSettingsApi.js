/**
 * Cache settings
 * Configures cache lifetime for objects stored in the Fastly cache, overriding cache freshness information that would otherwise be determined from cache-related headers on the HTTP response. When used in conjunction with conditions, cache settings objects provide detailed control over how long content persists in the cache.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesCacheSettingsApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createCacheSettingsWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createCacheSettings");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createCacheSettings");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'action': opts['action'],
        'cache_condition': opts['cacheCondition'],
        'name': opts['name'],
        'stale_ttl': opts['staleTtl'],
        'ttl': opts['ttl']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/cache_settings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createCacheSettings(serviceId, versionId, opts) {
      return this.createCacheSettingsWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteCacheSettings");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteCacheSettings");
      }
      // verify the required parameter 'cacheSettingsName' is set
      if (cacheSettingsName === undefined || cacheSettingsName === null) {
        throw new Error("Missing the required parameter 'cacheSettingsName' when calling deleteCacheSettings");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'cache_settings_name': cacheSettingsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/cache_settings/{cache_settings_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteCacheSettings(serviceId, versionId, cacheSettingsName) {
      return this.deleteCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getCacheSettings");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getCacheSettings");
      }
      // verify the required parameter 'cacheSettingsName' is set
      if (cacheSettingsName === undefined || cacheSettingsName === null) {
        throw new Error("Missing the required parameter 'cacheSettingsName' when calling getCacheSettings");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'cache_settings_name': cacheSettingsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/cache_settings/{cache_settings_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCacheSettings(serviceId, versionId, cacheSettingsName) {
      return this.getCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listCacheSettingsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listCacheSettings");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listCacheSettings");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/cache_settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listCacheSettings(serviceId, versionId) {
      return this.listCacheSettingsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateCacheSettings");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateCacheSettings");
      }
      // verify the required parameter 'cacheSettingsName' is set
      if (cacheSettingsName === undefined || cacheSettingsName === null) {
        throw new Error("Missing the required parameter 'cacheSettingsName' when calling updateCacheSettings");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'cache_settings_name': cacheSettingsName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'action': opts['action'],
        'cache_condition': opts['cacheCondition'],
        'name': opts['name'],
        'stale_ttl': opts['staleTtl'],
        'ttl': opts['ttl']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/cache_settings/{cache_settings_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateCacheSettings(serviceId, versionId, cacheSettingsName, opts) {
      return this.updateCacheSettingsWithHttpInfo(serviceId, versionId, cacheSettingsName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
