/**
 * Star
 * A star allows users to mark services of interest.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';


export default class AccountStarApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createServiceStarWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['inlineObject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/stars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createServiceStar(opts) {
      return this.createServiceStarWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteServiceStarWithHttpInfo(starId) {
      let postBody = null;
      // verify the required parameter 'starId' is set
      if (starId === undefined || starId === null) {
        throw new Error("Missing the required parameter 'starId' when calling deleteServiceStar");
      }

      let pathParams = {
        'star_id': starId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/stars/{star_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteServiceStar(starId) {
      return this.deleteServiceStarWithHttpInfo(starId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getServiceStarWithHttpInfo(starId) {
      let postBody = null;
      // verify the required parameter 'starId' is set
      if (starId === undefined || starId === null) {
        throw new Error("Missing the required parameter 'starId' when calling getServiceStar");
      }

      let pathParams = {
        'star_id': starId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/stars/{star_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getServiceStar(starId) {
      return this.getServiceStarWithHttpInfo(starId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listServiceStarsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse2001;
      return this.apiClient.callApi(
        '/stars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listServiceStars() {
      return this.listServiceStarsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
