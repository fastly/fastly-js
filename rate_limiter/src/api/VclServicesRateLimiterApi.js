/**
 * Rate Limiter
 * Rate limiters add configurable origin request rate limiting to a service. Use of this feature is by invite only and subject to the terms set forth in the invitation you were emailed. To create a rate limiting policy, you must have a [paid account with a contract](https://docs.fastly.com/en/guides/accounts-and-pricing-plans#paid-accounts-with-contractual-commitments) for Fastlyâ€™s services.
 *
 * The version of the OpenAPI document: 1.0.0-beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';
import ServiceServiceIdVersionVersionIdRateLimitersResponse from '../model/ServiceServiceIdVersionVersionIdRateLimitersResponse';


export default class VclServicesRateLimiterApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createRateLimiterWithHttpInfo(serviceId, versionId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createRateLimiter");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createRateLimiter");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createRateLimiter");
      }
      // verify the required parameter 'httpMethods' is set
      if (httpMethods === undefined || httpMethods === null) {
        throw new Error("Missing the required parameter 'httpMethods' when calling createRateLimiter");
      }
      // verify the required parameter 'rpsLimit' is set
      if (rpsLimit === undefined || rpsLimit === null) {
        throw new Error("Missing the required parameter 'rpsLimit' when calling createRateLimiter");
      }
      // verify the required parameter 'windowSize' is set
      if (windowSize === undefined || windowSize === null) {
        throw new Error("Missing the required parameter 'windowSize' when calling createRateLimiter");
      }
      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling createRateLimiter");
      }
      // verify the required parameter 'penaltyBoxDuration' is set
      if (penaltyBoxDuration === undefined || penaltyBoxDuration === null) {
        throw new Error("Missing the required parameter 'penaltyBoxDuration' when calling createRateLimiter");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling createRateLimiter");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'name': name,
        'uri_dictionary_name': opts['uriDictionaryName'],
        'http_methods': this.apiClient.buildCollectionParam(httpMethods, 'csv'),
        'rps_limit': rpsLimit,
        'window_size': windowSize,
        'client_key': this.apiClient.buildCollectionParam(clientKey, 'csv'),
        'penalty_box_duration': penaltyBoxDuration,
        'action': action,
        'response': opts['response'],
        'response_object_name': opts['responseObjectName'],
        'logger_type': opts['loggerType'],
        'feature_revision': opts['featureRevision']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [InlineObject];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/rate-limiters', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createRateLimiter(serviceId, versionId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts) {
      return this.createRateLimiterWithHttpInfo(serviceId, versionId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteRateLimiterWithHttpInfo(rateLimiterId) {
      let postBody = null;
      // verify the required parameter 'rateLimiterId' is set
      if (rateLimiterId === undefined || rateLimiterId === null) {
        throw new Error("Missing the required parameter 'rateLimiterId' when calling deleteRateLimiter");
      }

      let pathParams = {
        'rate_limiter_id': rateLimiterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/rate-limiters/{rate_limiter_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteRateLimiter(rateLimiterId) {
      return this.deleteRateLimiterWithHttpInfo(rateLimiterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getRateLimiterWithHttpInfo(rateLimiterId) {
      let postBody = null;
      // verify the required parameter 'rateLimiterId' is set
      if (rateLimiterId === undefined || rateLimiterId === null) {
        throw new Error("Missing the required parameter 'rateLimiterId' when calling getRateLimiter");
      }

      let pathParams = {
        'rate_limiter_id': rateLimiterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineObject];
      return this.apiClient.callApi(
        '/rate-limiters/{rate_limiter_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getRateLimiter(rateLimiterId) {
      return this.getRateLimiterWithHttpInfo(rateLimiterId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listRateLimitersWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listRateLimiters");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listRateLimiters");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/rate-limiters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listRateLimiters(serviceId, versionId) {
      return this.listRateLimitersWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateRateLimiterWithHttpInfo(rateLimiterId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'rateLimiterId' is set
      if (rateLimiterId === undefined || rateLimiterId === null) {
        throw new Error("Missing the required parameter 'rateLimiterId' when calling updateRateLimiter");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling updateRateLimiter");
      }
      // verify the required parameter 'httpMethods' is set
      if (httpMethods === undefined || httpMethods === null) {
        throw new Error("Missing the required parameter 'httpMethods' when calling updateRateLimiter");
      }
      // verify the required parameter 'rpsLimit' is set
      if (rpsLimit === undefined || rpsLimit === null) {
        throw new Error("Missing the required parameter 'rpsLimit' when calling updateRateLimiter");
      }
      // verify the required parameter 'windowSize' is set
      if (windowSize === undefined || windowSize === null) {
        throw new Error("Missing the required parameter 'windowSize' when calling updateRateLimiter");
      }
      // verify the required parameter 'clientKey' is set
      if (clientKey === undefined || clientKey === null) {
        throw new Error("Missing the required parameter 'clientKey' when calling updateRateLimiter");
      }
      // verify the required parameter 'penaltyBoxDuration' is set
      if (penaltyBoxDuration === undefined || penaltyBoxDuration === null) {
        throw new Error("Missing the required parameter 'penaltyBoxDuration' when calling updateRateLimiter");
      }
      // verify the required parameter 'action' is set
      if (action === undefined || action === null) {
        throw new Error("Missing the required parameter 'action' when calling updateRateLimiter");
      }

      let pathParams = {
        'rate_limiter_id': rateLimiterId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId'],
        'version': opts['version'],
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'name': name,
        'uri_dictionary_name': opts['uriDictionaryName'],
        'http_methods': this.apiClient.buildCollectionParam(httpMethods, 'csv'),
        'rps_limit': rpsLimit,
        'window_size': windowSize,
        'client_key': this.apiClient.buildCollectionParam(clientKey, 'csv'),
        'penalty_box_duration': penaltyBoxDuration,
        'action': action,
        'response': opts['response'],
        'response_object_name': opts['responseObjectName'],
        'logger_type': opts['loggerType'],
        'feature_revision': opts['featureRevision']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = [InlineObject1];
      return this.apiClient.callApi(
        '/rate-limiters/{rate_limiter_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateRateLimiter(rateLimiterId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts) {
      return this.updateRateLimiterWithHttpInfo(rateLimiterId, name, httpMethods, rpsLimit, windowSize, clientKey, penaltyBoxDuration, action, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
