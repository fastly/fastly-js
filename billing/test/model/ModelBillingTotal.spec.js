/**
 * Billing
 * Get information on current and past bills.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Billing);
  }
}(this, function(expect, Billing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Billing.ModelBillingTotal();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelBillingTotal', function() {
    it('should create an instance of ModelBillingTotal', function() {
      // uncomment below and update the code to test ModelBillingTotal
      //var instane = new Billing.ModelBillingTotal();
      //expect(instance).to.be.a(Billing.ModelBillingTotal);
    });

    it('should have the property bandwidth (base name: "bandwidth")', function() {
      // uncomment below and update the code to test the property bandwidth
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthCost (base name: "bandwidth_cost")', function() {
      // uncomment below and update the code to test the property bandwidthCost
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthUnits (base name: "bandwidth_units")', function() {
      // uncomment below and update the code to test the property bandwidthUnits
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property cost (base name: "cost")', function() {
      // uncomment below and update the code to test the property cost
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property costBeforeDiscount (base name: "cost_before_discount")', function() {
      // uncomment below and update the code to test the property costBeforeDiscount
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property discount (base name: "discount")', function() {
      // uncomment below and update the code to test the property discount
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property extras (base name: "extras")', function() {
      // uncomment below and update the code to test the property extras
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property extrasCost (base name: "extras_cost")', function() {
      // uncomment below and update the code to test the property extrasCost
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property incurredCost (base name: "incurred_cost")', function() {
      // uncomment below and update the code to test the property incurredCost
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property overage (base name: "overage")', function() {
      // uncomment below and update the code to test the property overage
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property planCode (base name: "plan_code")', function() {
      // uncomment below and update the code to test the property planCode
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property planMinimum (base name: "plan_minimum")', function() {
      // uncomment below and update the code to test the property planMinimum
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property planName (base name: "plan_name")', function() {
      // uncomment below and update the code to test the property planName
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property requests (base name: "requests")', function() {
      // uncomment below and update the code to test the property requests
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property requestsCost (base name: "requests_cost")', function() {
      // uncomment below and update the code to test the property requestsCost
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

    it('should have the property terms (base name: "terms")', function() {
      // uncomment below and update the code to test the property terms
      //var instance = new Billing.ModelBillingTotal();
      //expect(instance).to.be();
    });

  });

}));
