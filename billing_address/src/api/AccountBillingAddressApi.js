/**
 * Billing address
 * A billing address is used to calculate your bill correctly.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class AccountBillingAddressApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    addBillingAddrWithHttpInfo(customerId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject'];
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling addBillingAddr");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/customer/{customer_id}/billing_address', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    addBillingAddr(customerId, opts) {
      return this.addBillingAddrWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteBillingAddrWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteBillingAddr");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/customer/{customer_id}/billing_address', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteBillingAddr(customerId) {
      return this.deleteBillingAddrWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getBillingAddrWithHttpInfo(customerId) {
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getBillingAddr");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/customer/{customer_id}/billing_address', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getBillingAddr(customerId) {
      return this.getBillingAddrWithHttpInfo(customerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateBillingAddrWithHttpInfo(customerId, opts) {
      opts = opts || {};
      let postBody = opts['inlineObject1'];
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling updateBillingAddr");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/customer/{customer_id}/billing_address', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateBillingAddr(customerId, opts) {
      return this.updateBillingAddrWithHttpInfo(customerId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
