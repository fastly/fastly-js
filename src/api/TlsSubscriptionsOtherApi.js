/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* TlsSubscriptionsOther service.
* @module api/TlsSubscriptionsOtherApi
* @version 3.0.0-alpha1
*/
export default class TlsSubscriptionsOtherApi {

    /**
    * Constructs a new TlsSubscriptionsOtherApi. 
    * @alias module:api/TlsSubscriptionsOtherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;

        if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
            this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
        }
    }


    /**
     * Deletes a GlobalSign email challenge. After a GlobalSign email challenge is deleted, the domain can use HTTP and DNS validation methods again.
     * @param {Object} options
     * @param {String} options.tls_subscription_id
     * @param {String} options.globalsign_email_challenge_id
     * @param {String} options.tls_authorization_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallengesGlobalsignEmailChallengeIdWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      // Verify the required parameter 'globalsign_email_challenge_id' is set.
      if (options['globalsign_email_challenge_id'] === undefined || options['globalsign_email_challenge_id'] === null) {
        throw new Error("Missing the required parameter 'globalsign_email_challenge_id'.");
      }
      // Verify the required parameter 'tls_authorization_id' is set.
      if (options['tls_authorization_id'] === undefined || options['tls_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'tls_authorization_id'.");
      }

      let pathParams = {
        'tls_subscription_id': options['tls_subscription_id'],
        'globalsign_email_challenge_id': options['globalsign_email_challenge_id'],
        'tls_authorization_id': options['tls_authorization_id']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tls/subscriptions/{tls_subscription_id}/authorizations/{tls_authorization_id}/globalsign_email_challenges/{globalsign_email_challenge_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a GlobalSign email challenge. After a GlobalSign email challenge is deleted, the domain can use HTTP and DNS validation methods again.
     * @param {Object} options
     * @param {String} options.tls_subscription_id
     * @param {String} options.globalsign_email_challenge_id
     * @param {String} options.tls_authorization_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallengesGlobalsignEmailChallengeId(options = {}) {
      return this.deleteTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallengesGlobalsignEmailChallengeIdWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Creates an email challenge for domain on a GlobalSign subscription. An email challenge will generate an email that can be used to validate domain ownership. If this challenge is created, then the domain can only be validated using email for the given subscription.
     * @param {Object} options
     * @param {String} options.tls_subscription_id
     * @param {String} options.tls_authorization_id
     * @param {Object} [options.body]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    postTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallengesWithHttpInfo(options = {}) {
      let postBody = options['body'];
      // Verify the required parameter 'tls_subscription_id' is set.
      if (options['tls_subscription_id'] === undefined || options['tls_subscription_id'] === null) {
        throw new Error("Missing the required parameter 'tls_subscription_id'.");
      }
      // Verify the required parameter 'tls_authorization_id' is set.
      if (options['tls_authorization_id'] === undefined || options['tls_authorization_id'] === null) {
        throw new Error("Missing the required parameter 'tls_authorization_id'.");
      }

      let pathParams = {
        'tls_subscription_id': options['tls_subscription_id'],
        'tls_authorization_id': options['tls_authorization_id']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/tls/subscriptions/{tls_subscription_id}/authorizations/{tls_authorization_id}/globalsign_email_challenges', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates an email challenge for domain on a GlobalSign subscription. An email challenge will generate an email that can be used to validate domain ownership. If this challenge is created, then the domain can only be validated using email for the given subscription.
     * @param {Object} options
     * @param {String} options.tls_subscription_id
     * @param {String} options.tls_authorization_id
     * @param {Object} [options.body]
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    postTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallenges(options = {}) {
      return this.postTlsSubscriptionsTlsSubscriptionIdAuthorizationsTlsAuthorizationIdGlobalsignEmailChallengesWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
