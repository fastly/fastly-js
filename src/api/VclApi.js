/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VclResponse from '../model/VclResponse';


export default class VclApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createCustomVclWithHttpInfo(service_id, version_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling createCustomVcl");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling createCustomVcl");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'content': opts['content'],
        'main': opts['main'],
        'name': opts['name']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VclResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createCustomVcl(service_id, version_id, opts) {
      return this.createCustomVclWithHttpInfo(service_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteCustomVclWithHttpInfo(service_id, version_id, vcl_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling deleteCustomVcl");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling deleteCustomVcl");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling deleteCustomVcl");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteCustomVcl(service_id, version_id, vcl_name) {
      return this.deleteCustomVclWithHttpInfo(service_id, version_id, vcl_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclWithHttpInfo(service_id, version_id, vcl_name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVcl");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVcl");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling getCustomVcl");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
        'no_content': opts['no_content']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VclResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVcl(service_id, version_id, vcl_name, opts) {
      return this.getCustomVclWithHttpInfo(service_id, version_id, vcl_name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclBoilerplateWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVclBoilerplate");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVclBoilerplate");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/boilerplate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclBoilerplate(service_id, version_id) {
      return this.getCustomVclBoilerplateWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclGeneratedWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVclGenerated");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVclGenerated");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VclResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/generated_vcl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclGenerated(service_id, version_id) {
      return this.getCustomVclGeneratedWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclGeneratedHighlightedWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVclGeneratedHighlighted");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVclGeneratedHighlighted");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/generated_vcl/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclGeneratedHighlighted(service_id, version_id) {
      return this.getCustomVclGeneratedHighlightedWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclHighlightedWithHttpInfo(service_id, version_id, vcl_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVclHighlighted");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVclHighlighted");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling getCustomVclHighlighted");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclHighlighted(service_id, version_id, vcl_name) {
      return this.getCustomVclHighlightedWithHttpInfo(service_id, version_id, vcl_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCustomVclRawWithHttpInfo(service_id, version_id, vcl_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getCustomVclRaw");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getCustomVclRaw");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling getCustomVclRaw");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/download', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCustomVclRaw(service_id, version_id, vcl_name) {
      return this.getCustomVclRawWithHttpInfo(service_id, version_id, vcl_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listCustomVclWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling listCustomVcl");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling listCustomVcl");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VclResponse];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listCustomVcl(service_id, version_id) {
      return this.listCustomVclWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    setCustomVclMainWithHttpInfo(service_id, version_id, vcl_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling setCustomVclMain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling setCustomVclMain");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling setCustomVclMain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VclResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}/main', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    setCustomVclMain(service_id, version_id, vcl_name) {
      return this.setCustomVclMainWithHttpInfo(service_id, version_id, vcl_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateCustomVclWithHttpInfo(service_id, version_id, vcl_name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling updateCustomVcl");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling updateCustomVcl");
      }
      // verify the required parameter 'vcl_name' is set
      if (vcl_name === undefined || vcl_name === null) {
        throw new Error("Missing the required parameter 'vcl_name' when calling updateCustomVcl");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'vcl_name': vcl_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'content': opts['content'],
        'main': opts['main'],
        'name': opts['name']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = VclResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/vcl/{vcl_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateCustomVcl(service_id, version_id, vcl_name, opts) {
      return this.updateCustomVclWithHttpInfo(service_id, version_id, vcl_name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
