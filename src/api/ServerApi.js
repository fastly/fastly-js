/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ServerResponse from '../model/ServerResponse';


export default class ServerApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createPoolServerWithHttpInfo(service_id, pool_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling createPoolServer");
      }
      // verify the required parameter 'pool_id' is set
      if (pool_id === undefined || pool_id === null) {
        throw new Error("Missing the required parameter 'pool_id' when calling createPoolServer");
      }

      let pathParams = {
        'service_id': service_id,
        'pool_id': pool_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'weight': opts['weight'],
        'max_conn': opts['max_conn'],
        'port': opts['port'],
        'address': opts['address'],
        'comment': opts['comment'],
        'disabled': opts['disabled'],
        'override_host': opts['override_host']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ServerResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/pool/{pool_id}/server', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createPoolServer(service_id, pool_id, opts) {
      return this.createPoolServerWithHttpInfo(service_id, pool_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deletePoolServerWithHttpInfo(service_id, pool_id, server_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling deletePoolServer");
      }
      // verify the required parameter 'pool_id' is set
      if (pool_id === undefined || pool_id === null) {
        throw new Error("Missing the required parameter 'pool_id' when calling deletePoolServer");
      }
      // verify the required parameter 'server_id' is set
      if (server_id === undefined || server_id === null) {
        throw new Error("Missing the required parameter 'server_id' when calling deletePoolServer");
      }

      let pathParams = {
        'service_id': service_id,
        'pool_id': pool_id,
        'server_id': server_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/pool/{pool_id}/server/{server_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deletePoolServer(service_id, pool_id, server_id) {
      return this.deletePoolServerWithHttpInfo(service_id, pool_id, server_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getPoolServerWithHttpInfo(service_id, pool_id, server_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getPoolServer");
      }
      // verify the required parameter 'pool_id' is set
      if (pool_id === undefined || pool_id === null) {
        throw new Error("Missing the required parameter 'pool_id' when calling getPoolServer");
      }
      // verify the required parameter 'server_id' is set
      if (server_id === undefined || server_id === null) {
        throw new Error("Missing the required parameter 'server_id' when calling getPoolServer");
      }

      let pathParams = {
        'service_id': service_id,
        'pool_id': pool_id,
        'server_id': server_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServerResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/pool/{pool_id}/server/{server_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getPoolServer(service_id, pool_id, server_id) {
      return this.getPoolServerWithHttpInfo(service_id, pool_id, server_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listPoolServersWithHttpInfo(service_id, pool_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling listPoolServers");
      }
      // verify the required parameter 'pool_id' is set
      if (pool_id === undefined || pool_id === null) {
        throw new Error("Missing the required parameter 'pool_id' when calling listPoolServers");
      }

      let pathParams = {
        'service_id': service_id,
        'pool_id': pool_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ServerResponse];
      return this.apiClient.callApi(
        '/service/{service_id}/pool/{pool_id}/servers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listPoolServers(service_id, pool_id) {
      return this.listPoolServersWithHttpInfo(service_id, pool_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updatePoolServerWithHttpInfo(service_id, pool_id, server_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling updatePoolServer");
      }
      // verify the required parameter 'pool_id' is set
      if (pool_id === undefined || pool_id === null) {
        throw new Error("Missing the required parameter 'pool_id' when calling updatePoolServer");
      }
      // verify the required parameter 'server_id' is set
      if (server_id === undefined || server_id === null) {
        throw new Error("Missing the required parameter 'server_id' when calling updatePoolServer");
      }

      let pathParams = {
        'service_id': service_id,
        'pool_id': pool_id,
        'server_id': server_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'weight': opts['weight'],
        'max_conn': opts['max_conn'],
        'port': opts['port'],
        'address': opts['address'],
        'comment': opts['comment'],
        'disabled': opts['disabled'],
        'override_host': opts['override_host']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ServerResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/pool/{pool_id}/server/{server_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updatePoolServer(service_id, pool_id, server_id, opts) {
      return this.updatePoolServerWithHttpInfo(service_id, pool_id, server_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
