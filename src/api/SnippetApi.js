/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SnippetResponse from '../model/SnippetResponse';


export default class SnippetApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createSnippetWithHttpInfo(service_id, version_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling createSnippet");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling createSnippet");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'dynamic': opts['dynamic'],
        'type': opts['type'],
        'content': opts['content'],
        'priority': opts['priority']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SnippetResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createSnippet(service_id, version_id, opts) {
      return this.createSnippetWithHttpInfo(service_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteSnippetWithHttpInfo(service_id, version_id, snippet_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling deleteSnippet");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling deleteSnippet");
      }
      // verify the required parameter 'snippet_name' is set
      if (snippet_name === undefined || snippet_name === null) {
        throw new Error("Missing the required parameter 'snippet_name' when calling deleteSnippet");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'snippet_name': snippet_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteSnippet(service_id, version_id, snippet_name) {
      return this.deleteSnippetWithHttpInfo(service_id, version_id, snippet_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getSnippetWithHttpInfo(service_id, version_id, snippet_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getSnippet");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getSnippet");
      }
      // verify the required parameter 'snippet_name' is set
      if (snippet_name === undefined || snippet_name === null) {
        throw new Error("Missing the required parameter 'snippet_name' when calling getSnippet");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'snippet_name': snippet_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnippetResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getSnippet(service_id, version_id, snippet_name) {
      return this.getSnippetWithHttpInfo(service_id, version_id, snippet_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getSnippetDynamicWithHttpInfo(service_id, snippet_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getSnippetDynamic");
      }
      // verify the required parameter 'snippet_id' is set
      if (snippet_id === undefined || snippet_id === null) {
        throw new Error("Missing the required parameter 'snippet_id' when calling getSnippetDynamic");
      }

      let pathParams = {
        'service_id': service_id,
        'snippet_id': snippet_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SnippetResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/snippet/{snippet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getSnippetDynamic(service_id, snippet_id) {
      return this.getSnippetDynamicWithHttpInfo(service_id, snippet_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listSnippetsWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling listSnippets");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling listSnippets");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [SnippetResponse];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listSnippets(service_id, version_id) {
      return this.listSnippetsWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateSnippetWithHttpInfo(service_id, version_id, snippet_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling updateSnippet");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling updateSnippet");
      }
      // verify the required parameter 'snippet_name' is set
      if (snippet_name === undefined || snippet_name === null) {
        throw new Error("Missing the required parameter 'snippet_name' when calling updateSnippet");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'snippet_name': snippet_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SnippetResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateSnippet(service_id, version_id, snippet_name) {
      return this.updateSnippetWithHttpInfo(service_id, version_id, snippet_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateSnippetDynamicWithHttpInfo(service_id, snippet_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling updateSnippetDynamic");
      }
      // verify the required parameter 'snippet_id' is set
      if (snippet_id === undefined || snippet_id === null) {
        throw new Error("Missing the required parameter 'snippet_id' when calling updateSnippetDynamic");
      }

      let pathParams = {
        'service_id': service_id,
        'snippet_id': snippet_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'dynamic': opts['dynamic'],
        'type': opts['type'],
        'content': opts['content'],
        'priority': opts['priority']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SnippetResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/snippet/{snippet_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateSnippetDynamic(service_id, snippet_id, opts) {
      return this.updateSnippetDynamicWithHttpInfo(service_id, snippet_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
