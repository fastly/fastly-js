/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HeaderResponse from '../models/HeaderResponse';

/**
* Header service.
* @module api/HeaderApi
* @version 3.0.0-alpha1
*/
export default class HeaderApi {

    /**
    * Constructs a new HeaderApi. 
    * @alias module:api/HeaderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;

        if (typeof window === 'undefined' && Boolean(process.env.FASTLY_API_TOKEN)) {
            this.apiClient.authenticate(process.env.FASTLY_API_TOKEN);
        }
    }


    /**
     * Creates a new Header object.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {module:models/String} [options.action] - Accepts a string value.
     * @param {String} [options.cache_condition] - Name of the cache condition controlling when this configuration applies.
     * @param {String} [options.dst] - Header to set.
     * @param {Number} [options.ignore_if_set] - Don't add the header if it is added already. Only applies to 'set' action.
     * @param {String} [options.name] - A handle to refer to this Header object.
     * @param {Number} [options.priority=100] - Priority determines execution order. Lower numbers execute first.
     * @param {String} [options.regex] - Regular expression to use. Only applies to `regex` and `regex_repeat` actions.
     * @param {String} [options.request_condition] - Condition which, if met, will select this configuration during a request. Optional.
     * @param {String} [options.response_condition]
     * @param {String} [options.src] - Variable to be used as a source for the header content. Does not apply to `delete` action.
     * @param {String} [options.substitution] - Value to substitute in place of regular expression. Only applies to `regex` and `regex_repeat` actions.
     * @param {module:models/String} [options.type] - Accepts a string value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/HeaderResponse} and HTTP response
     */
    createHeaderObjectWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }

      let pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': options['action'],
        'cache_condition': options['cache_condition'],
        'dst': options['dst'],
        'ignore_if_set': options['ignore_if_set'],
        'name': options['name'],
        'priority': options['priority'],
        'regex': options['regex'],
        'request_condition': options['request_condition'],
        'response_condition': options['response_condition'],
        'src': options['src'],
        'substitution': options['substitution'],
        'type': options['type']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = HeaderResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Creates a new Header object.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {module:models/String} [options.action] - Accepts a string value.
     * @param {String} [options.cache_condition] - Name of the cache condition controlling when this configuration applies.
     * @param {String} [options.dst] - Header to set.
     * @param {Number} [options.ignore_if_set] - Don't add the header if it is added already. Only applies to 'set' action.
     * @param {String} [options.name] - A handle to refer to this Header object.
     * @param {Number} [options.priority=100] - Priority determines execution order. Lower numbers execute first.
     * @param {String} [options.regex] - Regular expression to use. Only applies to `regex` and `regex_repeat` actions.
     * @param {String} [options.request_condition] - Condition which, if met, will select this configuration during a request. Optional.
     * @param {String} [options.response_condition]
     * @param {String} [options.src] - Variable to be used as a source for the header content. Does not apply to `delete` action.
     * @param {String} [options.substitution] - Value to substitute in place of regular expression. Only applies to `regex` and `regex_repeat` actions.
     * @param {module:models/String} [options.type] - Accepts a string value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/HeaderResponse}
     */
    createHeaderObject(options = {}) {
      return this.createHeaderObjectWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Deletes a Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    deleteHeaderObjectWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'header_name' is set.
      if (options['header_name'] === undefined || options['header_name'] === null) {
        throw new Error("Missing the required parameter 'header_name'.");
      }

      let pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'header_name': options['header_name']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Deletes a Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    deleteHeaderObject(options = {}) {
      return this.deleteHeaderObjectWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Retrieves a Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/HeaderResponse} and HTTP response
     */
    getHeaderObjectWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'header_name' is set.
      if (options['header_name'] === undefined || options['header_name'] === null) {
        throw new Error("Missing the required parameter 'header_name'.");
      }

      let pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'header_name': options['header_name']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HeaderResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves a Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/HeaderResponse}
     */
    getHeaderObject(options = {}) {
      return this.getHeaderObjectWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Retrieves all Header objects for a particular Version of a Service.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:models/HeaderResponse>} and HTTP response
     */
    listHeaderObjectsWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }

      let pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [HeaderResponse];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Retrieves all Header objects for a particular Version of a Service.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:models/HeaderResponse>}
     */
    listHeaderObjects(options = {}) {
      return this.listHeaderObjectsWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * Modifies an existing Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @param {module:models/String} [options.action] - Accepts a string value.
     * @param {String} [options.cache_condition] - Name of the cache condition controlling when this configuration applies.
     * @param {String} [options.dst] - Header to set.
     * @param {Number} [options.ignore_if_set] - Don't add the header if it is added already. Only applies to 'set' action.
     * @param {String} [options.name] - A handle to refer to this Header object.
     * @param {Number} [options.priority=100] - Priority determines execution order. Lower numbers execute first.
     * @param {String} [options.regex] - Regular expression to use. Only applies to `regex` and `regex_repeat` actions.
     * @param {String} [options.request_condition] - Condition which, if met, will select this configuration during a request. Optional.
     * @param {String} [options.response_condition]
     * @param {String} [options.src] - Variable to be used as a source for the header content. Does not apply to `delete` action.
     * @param {String} [options.substitution] - Value to substitute in place of regular expression. Only applies to `regex` and `regex_repeat` actions.
     * @param {module:models/String} [options.type] - Accepts a string value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/HeaderResponse} and HTTP response
     */
    updateHeaderObjectWithHttpInfo(options = {}) {
      let postBody = null;
      // Verify the required parameter 'service_id' is set.
      if (options['service_id'] === undefined || options['service_id'] === null) {
        throw new Error("Missing the required parameter 'service_id'.");
      }
      // Verify the required parameter 'version_id' is set.
      if (options['version_id'] === undefined || options['version_id'] === null) {
        throw new Error("Missing the required parameter 'version_id'.");
      }
      // Verify the required parameter 'header_name' is set.
      if (options['header_name'] === undefined || options['header_name'] === null) {
        throw new Error("Missing the required parameter 'header_name'.");
      }

      let pathParams = {
        'service_id': options['service_id'],
        'version_id': options['version_id'],
        'header_name': options['header_name']
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'action': options['action'],
        'cache_condition': options['cache_condition'],
        'dst': options['dst'],
        'ignore_if_set': options['ignore_if_set'],
        'name': options['name'],
        'priority': options['priority'],
        'regex': options['regex'],
        'request_condition': options['request_condition'],
        'response_condition': options['response_condition'],
        'src': options['src'],
        'substitution': options['substitution'],
        'type': options['type']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = HeaderResponse;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/header/{header_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Modifies an existing Header object by name.
     * @param {Object} options
     * @param {String} options.service_id
     * @param {Number} options.version_id
     * @param {String} options.header_name
     * @param {module:models/String} [options.action] - Accepts a string value.
     * @param {String} [options.cache_condition] - Name of the cache condition controlling when this configuration applies.
     * @param {String} [options.dst] - Header to set.
     * @param {Number} [options.ignore_if_set] - Don't add the header if it is added already. Only applies to 'set' action.
     * @param {String} [options.name] - A handle to refer to this Header object.
     * @param {Number} [options.priority=100] - Priority determines execution order. Lower numbers execute first.
     * @param {String} [options.regex] - Regular expression to use. Only applies to `regex` and `regex_repeat` actions.
     * @param {String} [options.request_condition] - Condition which, if met, will select this configuration during a request. Optional.
     * @param {String} [options.response_condition]
     * @param {String} [options.src] - Variable to be used as a source for the header content. Does not apply to `delete` action.
     * @param {String} [options.substitution] - Value to substitute in place of regular expression. Only applies to `regex` and `regex_repeat` actions.
     * @param {module:models/String} [options.type] - Accepts a string value.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/HeaderResponse}
     */
    updateHeaderObject(options = {}) {
      return this.updateHeaderObjectWithHttpInfo(options)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
