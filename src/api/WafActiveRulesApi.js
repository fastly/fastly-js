/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Data from '../model/Data';
import OneOfwafActiveRuleResponsewafActiveRulesResponse from '../model/OneOfwafActiveRuleResponsewafActiveRulesResponse';
import WafActiveRule from '../model/WafActiveRule';
import WafActiveRuleResponse from '../model/WafActiveRuleResponse';
import WafActiveRulesResponse from '../model/WafActiveRulesResponse';


export default class WafActiveRulesApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    bulkDeleteWafActiveRulesWithHttpInfo(firewall_id, version_id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling bulkDeleteWafActiveRules");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling bulkDeleteWafActiveRules");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json; ext=bulk'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    bulkDeleteWafActiveRules(firewall_id, version_id, opts) {
      return this.bulkDeleteWafActiveRulesWithHttpInfo(firewall_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    bulkUpdateWafActiveRulesWithHttpInfo(firewall_id, version_id, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling bulkUpdateWafActiveRules");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling bulkUpdateWafActiveRules");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules/bulk', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    bulkUpdateWafActiveRules(firewall_id, version_id, opts) {
      return this.bulkUpdateWafActiveRulesWithHttpInfo(firewall_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    createWafActiveRuleWithHttpInfo(firewall_id, version_id, opts) {
      opts = opts || {};
      let postBody = opts['waf_active_rule'];
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling createWafActiveRule");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling createWafActiveRule");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json', 'application/vnd.api+json; ext=bulk'];
      let accepts = ['application/vnd.api+json'];
      let returnType = OneOfwafActiveRuleResponsewafActiveRulesResponse;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createWafActiveRule(firewall_id, version_id, opts) {
      return this.createWafActiveRuleWithHttpInfo(firewall_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    createWafActiveRulesTagWithHttpInfo(firewall_id, version_id, waf_tag_name, opts) {
      opts = opts || {};
      let postBody = opts['waf_active_rule'];
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling createWafActiveRulesTag");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling createWafActiveRulesTag");
      }
      // verify the required parameter 'waf_tag_name' is set
      if (waf_tag_name === undefined || waf_tag_name === null) {
        throw new Error("Missing the required parameter 'waf_tag_name' when calling createWafActiveRulesTag");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id,
        'waf_tag_name': waf_tag_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/tags/{waf_tag_name}/active-rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createWafActiveRulesTag(firewall_id, version_id, waf_tag_name, opts) {
      return this.createWafActiveRulesTagWithHttpInfo(firewall_id, version_id, waf_tag_name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id) {
      let postBody = null;
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling deleteWafActiveRule");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling deleteWafActiveRule");
      }
      // verify the required parameter 'waf_rule_id' is set
      if (waf_rule_id === undefined || waf_rule_id === null) {
        throw new Error("Missing the required parameter 'waf_rule_id' when calling deleteWafActiveRule");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id,
        'waf_rule_id': waf_rule_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules/{waf_rule_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteWafActiveRule(firewall_id, version_id, waf_rule_id) {
      return this.deleteWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling getWafActiveRule");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getWafActiveRule");
      }
      // verify the required parameter 'waf_rule_id' is set
      if (waf_rule_id === undefined || waf_rule_id === null) {
        throw new Error("Missing the required parameter 'waf_rule_id' when calling getWafActiveRule");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id,
        'waf_rule_id': waf_rule_id
      };
      let queryParams = {
        'include': opts['include']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = WafActiveRuleResponse;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules/{waf_rule_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getWafActiveRule(firewall_id, version_id, waf_rule_id, opts) {
      return this.getWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listWafActiveRulesWithHttpInfo(firewall_id, version_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling listWafActiveRules");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling listWafActiveRules");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id
      };
      let queryParams = {
        'filter[status]': opts['filter_status'],
        'filter[waf_rule_revision][message]': opts['filter_waf_rule_revision_message'],
        'filter[waf_rule_revision][modsec_rule_id]': opts['filter_waf_rule_revision_modsec_rule_id'],
        'filter[outdated]': opts['filter_outdated'],
        'include': opts['include'],
        'page[number]': opts['page_number'],
        'page[size]': opts['page_size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/vnd.api+json'];
      let returnType = WafActiveRulesResponse;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listWafActiveRules(firewall_id, version_id, opts) {
      return this.listWafActiveRulesWithHttpInfo(firewall_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id, opts) {
      opts = opts || {};
      let postBody = opts['waf_active_rule'];
      // verify the required parameter 'firewall_id' is set
      if (firewall_id === undefined || firewall_id === null) {
        throw new Error("Missing the required parameter 'firewall_id' when calling updateWafActiveRule");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling updateWafActiveRule");
      }
      // verify the required parameter 'waf_rule_id' is set
      if (waf_rule_id === undefined || waf_rule_id === null) {
        throw new Error("Missing the required parameter 'waf_rule_id' when calling updateWafActiveRule");
      }

      let pathParams = {
        'firewall_id': firewall_id,
        'version_id': version_id,
        'waf_rule_id': waf_rule_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json'];
      let accepts = ['application/vnd.api+json'];
      let returnType = WafActiveRuleResponse;
      return this.apiClient.callApi(
        '/waf/firewalls/{firewall_id}/versions/{version_id}/active-rules/{waf_rule_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateWafActiveRule(firewall_id, version_id, waf_rule_id, opts) {
      return this.updateWafActiveRuleWithHttpInfo(firewall_id, version_id, waf_rule_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
