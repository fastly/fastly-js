/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelDomain from '../model/ModelDomain';
import OneOfobjectstringboolean from '../model/OneOfobjectstringboolean';


export default class DomainApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    checkDomainWithHttpInfo(service_id, version_id, domain_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling checkDomain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling checkDomain");
      }
      // verify the required parameter 'domain_name' is set
      if (domain_name === undefined || domain_name === null) {
        throw new Error("Missing the required parameter 'domain_name' when calling checkDomain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'domain_name': domain_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [OneOfobjectstringboolean];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}/check', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    checkDomain(service_id, version_id, domain_name) {
      return this.checkDomainWithHttpInfo(service_id, version_id, domain_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    checkDomainsWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling checkDomains");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling checkDomains");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Array];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/check_all', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    checkDomains(service_id, version_id) {
      return this.checkDomainsWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    createDomainWithHttpInfo(service_id, version_id, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling createDomain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling createDomain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['service_id2'],
        'version': opts['version'],
        'created_at': opts['created_at'],
        'deleted_at': opts['deleted_at'],
        'updated_at': opts['updated_at'],
        'comment': opts['comment'],
        'name': opts['name']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createDomain(service_id, version_id, opts) {
      return this.createDomainWithHttpInfo(service_id, version_id, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteDomainWithHttpInfo(service_id, version_id, domain_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling deleteDomain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling deleteDomain");
      }
      // verify the required parameter 'domain_name' is set
      if (domain_name === undefined || domain_name === null) {
        throw new Error("Missing the required parameter 'domain_name' when calling deleteDomain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'domain_name': domain_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteDomain(service_id, version_id, domain_name) {
      return this.deleteDomainWithHttpInfo(service_id, version_id, domain_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getDomainWithHttpInfo(service_id, version_id, domain_name) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling getDomain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling getDomain");
      }
      // verify the required parameter 'domain_name' is set
      if (domain_name === undefined || domain_name === null) {
        throw new Error("Missing the required parameter 'domain_name' when calling getDomain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'domain_name': domain_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDomain(service_id, version_id, domain_name) {
      return this.getDomainWithHttpInfo(service_id, version_id, domain_name)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listDomainsWithHttpInfo(service_id, version_id) {
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling listDomains");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling listDomains");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listDomains(service_id, version_id) {
      return this.listDomainsWithHttpInfo(service_id, version_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateDomainWithHttpInfo(service_id, version_id, domain_name, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'service_id' is set
      if (service_id === undefined || service_id === null) {
        throw new Error("Missing the required parameter 'service_id' when calling updateDomain");
      }
      // verify the required parameter 'version_id' is set
      if (version_id === undefined || version_id === null) {
        throw new Error("Missing the required parameter 'version_id' when calling updateDomain");
      }
      // verify the required parameter 'domain_name' is set
      if (domain_name === undefined || domain_name === null) {
        throw new Error("Missing the required parameter 'domain_name' when calling updateDomain");
      }

      let pathParams = {
        'service_id': service_id,
        'version_id': version_id,
        'domain_name': domain_name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['service_id2'],
        'version': opts['version'],
        'created_at': opts['created_at'],
        'deleted_at': opts['deleted_at'],
        'updated_at': opts['updated_at'],
        'comment': opts['comment'],
        'name': opts['name']
      };

      let authNames = ['token'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ModelDomain;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/domain/{domain_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateDomain(service_id, version_id, domain_name, opts) {
      return this.updateDomainWithHttpInfo(service_id, version_id, domain_name, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
