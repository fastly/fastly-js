/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GenericTokenError from '../model/GenericTokenError';
import InlineResponse400 from '../model/InlineResponse400';
import ModelToken from '../model/ModelToken';
import ModelTokenCreated from '../model/ModelTokenCreated';


export default class TokensApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    bulkRevokeTokensWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = ['application/vnd.api+json; ext=bulk'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    bulkRevokeTokens(opts) {
      return this.bulkRevokeTokensWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    createTokenWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = ModelTokenCreated;
      return this.apiClient.callApi(
        '/tokens', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createToken() {
      return this.createTokenWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getTokenCurrentWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ModelToken;
      return this.apiClient.callApi(
        '/tokens/self', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getTokenCurrent() {
      return this.getTokenCurrentWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listTokensCustomerWithHttpInfo(customer_id) {
      let postBody = null;
      // verify the required parameter 'customer_id' is set
      if (customer_id === undefined || customer_id === null) {
        throw new Error("Missing the required parameter 'customer_id' when calling listTokensCustomer");
      }

      let pathParams = {
        'customer_id': customer_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelToken];
      return this.apiClient.callApi(
        '/customer/{customer_id}/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listTokensCustomer(customer_id) {
      return this.listTokensCustomerWithHttpInfo(customer_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listTokensUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ModelToken];
      return this.apiClient.callApi(
        '/tokens', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listTokensUser() {
      return this.listTokensUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    revokeTokenWithHttpInfo(token_id) {
      let postBody = null;
      // verify the required parameter 'token_id' is set
      if (token_id === undefined || token_id === null) {
        throw new Error("Missing the required parameter 'token_id' when calling revokeToken");
      }

      let pathParams = {
        'token_id': token_id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/{token_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    revokeToken(token_id) {
      return this.revokeTokenWithHttpInfo(token_id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    revokeTokenCurrentWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tokens/self', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    revokeTokenCurrent() {
      return this.revokeTokenCurrentWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
