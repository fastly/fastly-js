/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ModelBackendAllOf {
    
    constructor() { 
        
        ModelBackendAllOf.initialize(this);
    }

    
    static initialize(obj) { 
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelBackendAllOf();

            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('auto_loadbalance')) {
                obj['auto_loadbalance'] = ApiClient.convertToType(data['auto_loadbalance'], 'Boolean');
            }
            if (data.hasOwnProperty('between_bytes_timeout')) {
                obj['between_bytes_timeout'] = ApiClient.convertToType(data['between_bytes_timeout'], 'Number');
            }
            if (data.hasOwnProperty('client_cert')) {
                obj['client_cert'] = ApiClient.convertToType(data['client_cert'], 'String');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('connect_timeout')) {
                obj['connect_timeout'] = ApiClient.convertToType(data['connect_timeout'], 'Number');
            }
            if (data.hasOwnProperty('first_byte_timeout')) {
                obj['first_byte_timeout'] = ApiClient.convertToType(data['first_byte_timeout'], 'Number');
            }
            if (data.hasOwnProperty('healthcheck')) {
                obj['healthcheck'] = ApiClient.convertToType(data['healthcheck'], 'String');
            }
            if (data.hasOwnProperty('hostname')) {
                obj['hostname'] = ApiClient.convertToType(data['hostname'], 'String');
            }
            if (data.hasOwnProperty('ipv4')) {
                obj['ipv4'] = ApiClient.convertToType(data['ipv4'], 'String');
            }
            if (data.hasOwnProperty('ipv6')) {
                obj['ipv6'] = ApiClient.convertToType(data['ipv6'], 'String');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('max_conn')) {
                obj['max_conn'] = ApiClient.convertToType(data['max_conn'], 'Number');
            }
            if (data.hasOwnProperty('max_tls_version')) {
                obj['max_tls_version'] = ApiClient.convertToType(data['max_tls_version'], 'String');
            }
            if (data.hasOwnProperty('min_tls_version')) {
                obj['min_tls_version'] = ApiClient.convertToType(data['min_tls_version'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('override_host')) {
                obj['override_host'] = ApiClient.convertToType(data['override_host'], 'String');
            }
            if (data.hasOwnProperty('port')) {
                obj['port'] = ApiClient.convertToType(data['port'], 'Number');
            }
            if (data.hasOwnProperty('request_condition')) {
                obj['request_condition'] = ApiClient.convertToType(data['request_condition'], 'String');
            }
            if (data.hasOwnProperty('shield')) {
                obj['shield'] = ApiClient.convertToType(data['shield'], 'String');
            }
            if (data.hasOwnProperty('ssl_ca_cert')) {
                obj['ssl_ca_cert'] = ApiClient.convertToType(data['ssl_ca_cert'], 'String');
            }
            if (data.hasOwnProperty('ssl_cert_hostname')) {
                obj['ssl_cert_hostname'] = ApiClient.convertToType(data['ssl_cert_hostname'], 'String');
            }
            if (data.hasOwnProperty('ssl_check_cert')) {
                obj['ssl_check_cert'] = ApiClient.convertToType(data['ssl_check_cert'], 'Boolean');
            }
            if (data.hasOwnProperty('ssl_ciphers')) {
                obj['ssl_ciphers'] = ApiClient.convertToType(data['ssl_ciphers'], 'String');
            }
            if (data.hasOwnProperty('ssl_client_cert')) {
                obj['ssl_client_cert'] = ApiClient.convertToType(data['ssl_client_cert'], 'String');
            }
            if (data.hasOwnProperty('ssl_client_key')) {
                obj['ssl_client_key'] = ApiClient.convertToType(data['ssl_client_key'], 'String');
            }
            if (data.hasOwnProperty('ssl_hostname')) {
                obj['ssl_hostname'] = ApiClient.convertToType(data['ssl_hostname'], 'String');
            }
            if (data.hasOwnProperty('ssl_sni_hostname')) {
                obj['ssl_sni_hostname'] = ApiClient.convertToType(data['ssl_sni_hostname'], 'String');
            }
            if (data.hasOwnProperty('use_ssl')) {
                obj['use_ssl'] = ApiClient.convertToType(data['use_ssl'], 'Boolean');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }


}


ModelBackendAllOf.prototype['address'] = undefined;


ModelBackendAllOf.prototype['auto_loadbalance'] = undefined;


ModelBackendAllOf.prototype['between_bytes_timeout'] = undefined;


ModelBackendAllOf.prototype['client_cert'] = undefined;


ModelBackendAllOf.prototype['comment'] = '';


ModelBackendAllOf.prototype['connect_timeout'] = undefined;


ModelBackendAllOf.prototype['first_byte_timeout'] = undefined;


ModelBackendAllOf.prototype['healthcheck'] = undefined;


ModelBackendAllOf.prototype['hostname'] = undefined;


ModelBackendAllOf.prototype['ipv4'] = undefined;


ModelBackendAllOf.prototype['ipv6'] = undefined;


ModelBackendAllOf.prototype['locked'] = undefined;


ModelBackendAllOf.prototype['max_conn'] = undefined;


ModelBackendAllOf.prototype['max_tls_version'] = undefined;


ModelBackendAllOf.prototype['min_tls_version'] = undefined;


ModelBackendAllOf.prototype['name'] = undefined;


ModelBackendAllOf.prototype['override_host'] = undefined;


ModelBackendAllOf.prototype['port'] = undefined;


ModelBackendAllOf.prototype['request_condition'] = undefined;


ModelBackendAllOf.prototype['shield'] = undefined;


ModelBackendAllOf.prototype['ssl_ca_cert'] = undefined;


ModelBackendAllOf.prototype['ssl_cert_hostname'] = undefined;


ModelBackendAllOf.prototype['ssl_check_cert'] = true;


ModelBackendAllOf.prototype['ssl_ciphers'] = undefined;


ModelBackendAllOf.prototype['ssl_client_cert'] = undefined;


ModelBackendAllOf.prototype['ssl_client_key'] = undefined;


ModelBackendAllOf.prototype['ssl_hostname'] = undefined;


ModelBackendAllOf.prototype['ssl_sni_hostname'] = undefined;


ModelBackendAllOf.prototype['use_ssl'] = undefined;


ModelBackendAllOf.prototype['weight'] = undefined;






export default ModelBackendAllOf;

