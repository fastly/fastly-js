/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit developer.fastly.com/reference/api/ 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';


class ModelWafFirewallVersions {
    
    constructor() { 
        
        ModelWafFirewallVersions.initialize(this);
    }

    
    static initialize(obj) { 
    }

    
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelWafFirewallVersions();

            if (data.hasOwnProperty('active')) {
                obj['active'] = ApiClient.convertToType(data['active'], 'Boolean');
            }
            if (data.hasOwnProperty('active_rules_fastly_block_count')) {
                obj['active_rules_fastly_block_count'] = ApiClient.convertToType(data['active_rules_fastly_block_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_fastly_log_count')) {
                obj['active_rules_fastly_log_count'] = ApiClient.convertToType(data['active_rules_fastly_log_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_fastly_score_count')) {
                obj['active_rules_fastly_score_count'] = ApiClient.convertToType(data['active_rules_fastly_score_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_owasp_block_count')) {
                obj['active_rules_owasp_block_count'] = ApiClient.convertToType(data['active_rules_owasp_block_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_owasp_log_count')) {
                obj['active_rules_owasp_log_count'] = ApiClient.convertToType(data['active_rules_owasp_log_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_owasp_score_count')) {
                obj['active_rules_owasp_score_count'] = ApiClient.convertToType(data['active_rules_owasp_score_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_trustwave_block_count')) {
                obj['active_rules_trustwave_block_count'] = ApiClient.convertToType(data['active_rules_trustwave_block_count'], 'Number');
            }
            if (data.hasOwnProperty('active_rules_trustwave_log_count')) {
                obj['active_rules_trustwave_log_count'] = ApiClient.convertToType(data['active_rules_trustwave_log_count'], 'Number');
            }
            if (data.hasOwnProperty('allowed_http_versions')) {
                obj['allowed_http_versions'] = ApiClient.convertToType(data['allowed_http_versions'], 'String');
            }
            if (data.hasOwnProperty('allowed_methods')) {
                obj['allowed_methods'] = ApiClient.convertToType(data['allowed_methods'], 'String');
            }
            if (data.hasOwnProperty('allowed_request_content_type')) {
                obj['allowed_request_content_type'] = ApiClient.convertToType(data['allowed_request_content_type'], 'String');
            }
            if (data.hasOwnProperty('allowed_request_content_type_charset')) {
                obj['allowed_request_content_type_charset'] = ApiClient.convertToType(data['allowed_request_content_type_charset'], 'String');
            }
            if (data.hasOwnProperty('arg_name_length')) {
                obj['arg_name_length'] = ApiClient.convertToType(data['arg_name_length'], 'Number');
            }
            if (data.hasOwnProperty('arg_length')) {
                obj['arg_length'] = ApiClient.convertToType(data['arg_length'], 'Number');
            }
            if (data.hasOwnProperty('combined_file_sizes')) {
                obj['combined_file_sizes'] = ApiClient.convertToType(data['combined_file_sizes'], 'Number');
            }
            if (data.hasOwnProperty('comment')) {
                obj['comment'] = ApiClient.convertToType(data['comment'], 'String');
            }
            if (data.hasOwnProperty('created_at')) {
                obj['created_at'] = ApiClient.convertToType(data['created_at'], 'String');
            }
            if (data.hasOwnProperty('critical_anomaly_score')) {
                obj['critical_anomaly_score'] = ApiClient.convertToType(data['critical_anomaly_score'], 'Number');
            }
            if (data.hasOwnProperty('crs_validate_utf8_encoding')) {
                obj['crs_validate_utf8_encoding'] = ApiClient.convertToType(data['crs_validate_utf8_encoding'], 'Boolean');
            }
            if (data.hasOwnProperty('deployed_at')) {
                obj['deployed_at'] = ApiClient.convertToType(data['deployed_at'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('error_anomaly_score')) {
                obj['error_anomaly_score'] = ApiClient.convertToType(data['error_anomaly_score'], 'Number');
            }
            if (data.hasOwnProperty('high_risk_country_codes')) {
                obj['high_risk_country_codes'] = ApiClient.convertToType(data['high_risk_country_codes'], 'String');
            }
            if (data.hasOwnProperty('http_violation_score_threshold')) {
                obj['http_violation_score_threshold'] = ApiClient.convertToType(data['http_violation_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('inbound_anomaly_score_threshold')) {
                obj['inbound_anomaly_score_threshold'] = ApiClient.convertToType(data['inbound_anomaly_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('last_deployment_status')) {
                obj['last_deployment_status'] = ApiClient.convertToType(data['last_deployment_status'], 'String');
            }
            if (data.hasOwnProperty('lfi_score_threshold')) {
                obj['lfi_score_threshold'] = ApiClient.convertToType(data['lfi_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('locked')) {
                obj['locked'] = ApiClient.convertToType(data['locked'], 'Boolean');
            }
            if (data.hasOwnProperty('max_file_size')) {
                obj['max_file_size'] = ApiClient.convertToType(data['max_file_size'], 'Number');
            }
            if (data.hasOwnProperty('max_num_args')) {
                obj['max_num_args'] = ApiClient.convertToType(data['max_num_args'], 'Number');
            }
            if (data.hasOwnProperty('notice_anomaly_score')) {
                obj['notice_anomaly_score'] = ApiClient.convertToType(data['notice_anomaly_score'], 'Number');
            }
            if (data.hasOwnProperty('number')) {
                obj['number'] = ApiClient.convertToType(data['number'], 'Number');
            }
            if (data.hasOwnProperty('paranoia_level')) {
                obj['paranoia_level'] = ApiClient.convertToType(data['paranoia_level'], 'Number');
            }
            if (data.hasOwnProperty('php_injection_score_threshold')) {
                obj['php_injection_score_threshold'] = ApiClient.convertToType(data['php_injection_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('rce_score_threshold')) {
                obj['rce_score_threshold'] = ApiClient.convertToType(data['rce_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('restricted_extensions')) {
                obj['restricted_extensions'] = ApiClient.convertToType(data['restricted_extensions'], 'String');
            }
            if (data.hasOwnProperty('restricted_headers')) {
                obj['restricted_headers'] = ApiClient.convertToType(data['restricted_headers'], 'String');
            }
            if (data.hasOwnProperty('rfi_score_threshold')) {
                obj['rfi_score_threshold'] = ApiClient.convertToType(data['rfi_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('session_fixation_score_threshold')) {
                obj['session_fixation_score_threshold'] = ApiClient.convertToType(data['session_fixation_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('sql_injection_score_threshold')) {
                obj['sql_injection_score_threshold'] = ApiClient.convertToType(data['sql_injection_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('total_arg_length')) {
                obj['total_arg_length'] = ApiClient.convertToType(data['total_arg_length'], 'Number');
            }
            if (data.hasOwnProperty('warning_anomaly_score')) {
                obj['warning_anomaly_score'] = ApiClient.convertToType(data['warning_anomaly_score'], 'Number');
            }
            if (data.hasOwnProperty('xss_score_threshold')) {
                obj['xss_score_threshold'] = ApiClient.convertToType(data['xss_score_threshold'], 'Number');
            }
            if (data.hasOwnProperty('updated_at')) {
                obj['updated_at'] = ApiClient.convertToType(data['updated_at'], 'String');
            }
        }
        return obj;
    }


}


ModelWafFirewallVersions.prototype['active'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_fastly_block_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_fastly_log_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_fastly_score_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_owasp_block_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_owasp_log_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_owasp_score_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_trustwave_block_count'] = undefined;


ModelWafFirewallVersions.prototype['active_rules_trustwave_log_count'] = undefined;


ModelWafFirewallVersions.prototype['allowed_http_versions'] = 'HTTP/1.0 HTTP/1.1 HTTP/2';


ModelWafFirewallVersions.prototype['allowed_methods'] = 'GET HEAD POST OPTIONS PUT PATCH DELETE';


ModelWafFirewallVersions.prototype['allowed_request_content_type'] = 'application/x-www-form-urlencoded|multipart/form-data|text/xml|application/xml|application/x-amf|application/json|text/plain';


ModelWafFirewallVersions.prototype['allowed_request_content_type_charset'] = 'utf-8|iso-8859-1|iso-8859-15|windows-1252';


ModelWafFirewallVersions.prototype['arg_name_length'] = 100;


ModelWafFirewallVersions.prototype['arg_length'] = 400;


ModelWafFirewallVersions.prototype['combined_file_sizes'] = 10000000;


ModelWafFirewallVersions.prototype['comment'] = '';


ModelWafFirewallVersions.prototype['created_at'] = undefined;


ModelWafFirewallVersions.prototype['critical_anomaly_score'] = 6;


ModelWafFirewallVersions.prototype['crs_validate_utf8_encoding'] = undefined;


ModelWafFirewallVersions.prototype['deployed_at'] = undefined;


ModelWafFirewallVersions.prototype['error'] = undefined;


ModelWafFirewallVersions.prototype['error_anomaly_score'] = 5;


ModelWafFirewallVersions.prototype['high_risk_country_codes'] = undefined;


ModelWafFirewallVersions.prototype['http_violation_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['inbound_anomaly_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['last_deployment_status'] = undefined;


ModelWafFirewallVersions.prototype['lfi_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['locked'] = false;


ModelWafFirewallVersions.prototype['max_file_size'] = 10000000;


ModelWafFirewallVersions.prototype['max_num_args'] = 255;


ModelWafFirewallVersions.prototype['notice_anomaly_score'] = 4;


ModelWafFirewallVersions.prototype['number'] = undefined;


ModelWafFirewallVersions.prototype['paranoia_level'] = 1;


ModelWafFirewallVersions.prototype['php_injection_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['rce_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['restricted_extensions'] = '.asa/ .asax/ .ascx/ .axd/ .backup/ .bak/ .bat/ .cdx/ .cer/ .cfg/ .cmd/ .com/ .config/ .conf/ .cs/ .csproj/ .csr/ .dat/ .db/ .dbf/ .dll/ .dos/ .htr/ .htw/ .ida/ .idc/ .idq/ .inc/ .ini/ .key/ .licx/ .lnk/ .log/ .mdb/ .old/ .pass/ .pdb/ .pol/ .printer/ .pwd/ .resources/ .resx/ .sql/ .sys/ .vb/ .vbs/ .vbproj/ .vsdisco/ .webinfo/ .xsd/ .xsx';


ModelWafFirewallVersions.prototype['restricted_headers'] = '/proxy/ /lock-token/ /content-range/ /translate/ /if/';


ModelWafFirewallVersions.prototype['rfi_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['session_fixation_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['sql_injection_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['total_arg_length'] = 6400;


ModelWafFirewallVersions.prototype['warning_anomaly_score'] = undefined;


ModelWafFirewallVersions.prototype['xss_score_threshold'] = undefined;


ModelWafFirewallVersions.prototype['updated_at'] = undefined;






ModelWafFirewallVersions['LastDeploymentStatusEnum'] = {

    
    "pending": "pending",

    
    "in progress": "in progress",

    
    "completed": "completed",

    
    "failed": "failed"
};



export default ModelWafFirewallVersions;

