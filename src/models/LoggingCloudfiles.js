/**
 * Fastly API
 * Via the Fastly API you can perform any of the operations that are possible within the management console,  including creating services, domains, and backends, configuring rules or uploading your own application code, as well as account operations such as user administration and billing reports. The API is organized into collections of endpoints that allow manipulation of objects related to Fastly services and accounts. For the most accurate and up-to-date API reference content, visit our [Developer Hub](https://developer.fastly.com/reference/api/) 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LoggingCloudfilesAllOf from './LoggingCloudfilesAllOf';
import LoggingCommon from './LoggingCommon';
import LoggingCompressionCodec from './LoggingCompressionCodec';
import LoggingFormatVersion from './LoggingFormatVersion';
import LoggingGenericCommon from './LoggingGenericCommon';
import LoggingMessageType from './LoggingMessageType';
import LoggingPlacement from './LoggingPlacement';

/**
 * The LoggingCloudfiles model module.
 * @module models/LoggingCloudfiles
 * @version 3.0.0-alpha1
 */
class LoggingCloudfiles {
    /**
     * Constructs a new <code>LoggingCloudfiles</code>.
     * @alias module:models/LoggingCloudfiles
     * @implements module:models/LoggingCommon
     * @implements module:models/LoggingGenericCommon
     * @implements module:models/LoggingCloudfilesAllOf
     */
    constructor() { 
        LoggingCommon.initialize(this);LoggingGenericCommon.initialize(this);LoggingCloudfilesAllOf.initialize(this);
        LoggingCloudfiles.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoggingCloudfiles</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:models/LoggingCloudfiles} obj Optional instance to populate.
     * @return {module:models/LoggingCloudfiles} The populated <code>LoggingCloudfiles</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoggingCloudfiles();
            LoggingCommon.constructFromObject(data, obj);
            LoggingGenericCommon.constructFromObject(data, obj);
            LoggingCloudfilesAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('format_version')) {
                obj['format_version'] = LoggingFormatVersion.constructFromObject(data['format_version']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('placement')) {
                obj['placement'] = LoggingPlacement.constructFromObject(data['placement']);
            }
            if (data.hasOwnProperty('response_condition')) {
                obj['response_condition'] = ApiClient.convertToType(data['response_condition'], 'String');
            }
            if (data.hasOwnProperty('compression_codec')) {
                obj['compression_codec'] = LoggingCompressionCodec.constructFromObject(data['compression_codec']);
            }
            if (data.hasOwnProperty('gzip_level')) {
                obj['gzip_level'] = ApiClient.convertToType(data['gzip_level'], 'Number');
            }
            if (data.hasOwnProperty('message_type')) {
                obj['message_type'] = LoggingMessageType.constructFromObject(data['message_type']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('timestamp_format')) {
                obj['timestamp_format'] = ApiClient.convertToType(data['timestamp_format'], 'String');
            }
            if (data.hasOwnProperty('access_key')) {
                obj['access_key'] = ApiClient.convertToType(data['access_key'], 'String');
            }
            if (data.hasOwnProperty('bucket_name')) {
                obj['bucket_name'] = ApiClient.convertToType(data['bucket_name'], 'String');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('public_key')) {
                obj['public_key'] = ApiClient.convertToType(data['public_key'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }


}

/**
 * A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
 * @member {String} format
 * @default '%h %l %u %t "%r" %&gt;s %b'
 */
LoggingCloudfiles.prototype['format'] = '%h %l %u %t "%r" %&gt;s %b';

/**
 * @member {module:models/LoggingFormatVersion} format_version
 */
LoggingCloudfiles.prototype['format_version'] = undefined;

/**
 * The name for the real-time logging configuration.
 * @member {String} name
 */
LoggingCloudfiles.prototype['name'] = undefined;

/**
 * @member {module:models/LoggingPlacement} placement
 */
LoggingCloudfiles.prototype['placement'] = undefined;

/**
 * The name of an existing condition in the configured endpoint, or leave blank to always execute.
 * @member {String} response_condition
 */
LoggingCloudfiles.prototype['response_condition'] = undefined;

/**
 * @member {module:models/LoggingCompressionCodec} compression_codec
 */
LoggingCloudfiles.prototype['compression_codec'] = undefined;

/**
 * What level of gzip encoding to have when sending logs (default `0`, no compression). If an explicit non-zero value is set, then `compression_codec` will default to \"gzip.\" Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
 * @member {Number} gzip_level
 * @default 0
 */
LoggingCloudfiles.prototype['gzip_level'] = 0;

/**
 * @member {module:models/LoggingMessageType} message_type
 */
LoggingCloudfiles.prototype['message_type'] = undefined;

/**
 * How frequently log files are finalized so they can be available for reading (in seconds).
 * @member {Number} period
 * @default 3600
 */
LoggingCloudfiles.prototype['period'] = 3600;

/**
 * Date and time in ISO 8601 format.
 * @member {String} timestamp_format
 */
LoggingCloudfiles.prototype['timestamp_format'] = undefined;

/**
 * Your Cloud Files account access key.
 * @member {String} access_key
 */
LoggingCloudfiles.prototype['access_key'] = undefined;

/**
 * The name of your Cloud Files container.
 * @member {String} bucket_name
 */
LoggingCloudfiles.prototype['bucket_name'] = undefined;

/**
 * The path to upload logs to.
 * @member {String} path
 * @default 'null'
 */
LoggingCloudfiles.prototype['path'] = 'null';

/**
 * A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
 * @member {String} public_key
 * @default 'null'
 */
LoggingCloudfiles.prototype['public_key'] = 'null';

/**
 * The region to stream logs to.
 * @member {module:models/LoggingCloudfiles.RegionEnum} region
 */
LoggingCloudfiles.prototype['region'] = undefined;

/**
 * The username for your Cloud Files account.
 * @member {String} user
 */
LoggingCloudfiles.prototype['user'] = undefined;


// Implement LoggingCommon interface:
/**
 * A Fastly [log format string](https://docs.fastly.com/en/guides/custom-log-formats).
 * @member {String} format
 * @default '%h %l %u %t "%r" %&gt;s %b'
 */
LoggingCommon.prototype['format'] = '%h %l %u %t "%r" %&gt;s %b';
/**
 * @member {module:models/LoggingFormatVersion} format_version
 */
LoggingCommon.prototype['format_version'] = undefined;
/**
 * The name for the real-time logging configuration.
 * @member {String} name
 */
LoggingCommon.prototype['name'] = undefined;
/**
 * @member {module:models/LoggingPlacement} placement
 */
LoggingCommon.prototype['placement'] = undefined;
/**
 * The name of an existing condition in the configured endpoint, or leave blank to always execute.
 * @member {String} response_condition
 */
LoggingCommon.prototype['response_condition'] = undefined;
// Implement LoggingGenericCommon interface:
/**
 * @member {module:models/LoggingCompressionCodec} compression_codec
 */
LoggingGenericCommon.prototype['compression_codec'] = undefined;
/**
 * What level of gzip encoding to have when sending logs (default `0`, no compression). If an explicit non-zero value is set, then `compression_codec` will default to \"gzip.\" Specifying both `compression_codec` and `gzip_level` in the same API request will result in an error.
 * @member {Number} gzip_level
 * @default 0
 */
LoggingGenericCommon.prototype['gzip_level'] = 0;
/**
 * @member {module:models/LoggingMessageType} message_type
 */
LoggingGenericCommon.prototype['message_type'] = undefined;
/**
 * How frequently log files are finalized so they can be available for reading (in seconds).
 * @member {Number} period
 * @default 3600
 */
LoggingGenericCommon.prototype['period'] = 3600;
/**
 * Date and time in ISO 8601 format.
 * @member {String} timestamp_format
 */
LoggingGenericCommon.prototype['timestamp_format'] = undefined;
// Implement LoggingCloudfilesAllOf interface:
/**
 * Your Cloud Files account access key.
 * @member {String} access_key
 */
LoggingCloudfilesAllOf.prototype['access_key'] = undefined;
/**
 * The name of your Cloud Files container.
 * @member {String} bucket_name
 */
LoggingCloudfilesAllOf.prototype['bucket_name'] = undefined;
/**
 * The path to upload logs to.
 * @member {String} path
 * @default 'null'
 */
LoggingCloudfilesAllOf.prototype['path'] = 'null';
/**
 * A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
 * @member {String} public_key
 * @default 'null'
 */
LoggingCloudfilesAllOf.prototype['public_key'] = 'null';
/**
 * The region to stream logs to.
 * @member {module:models/LoggingCloudfilesAllOf.RegionEnum} region
 */
LoggingCloudfilesAllOf.prototype['region'] = undefined;
/**
 * The username for your Cloud Files account.
 * @member {String} user
 */
LoggingCloudfilesAllOf.prototype['user'] = undefined;



/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
LoggingCloudfiles['RegionEnum'] = {

    /**
     * value: "DFW"
     * @const
     */
    "DFW": "DFW",

    /**
     * value: "ORD"
     * @const
     */
    "ORD": "ORD",

    /**
     * value: "IAD"
     * @const
     */
    "IAD": "IAD",

    /**
     * value: "LON"
     * @const
     */
    "LON": "LON",

    /**
     * value: "SYD"
     * @const
     */
    "SYD": "SYD",

    /**
     * value: "HKG"
     * @const
     */
    "HKG": "HKG"
};



export default LoggingCloudfiles;

