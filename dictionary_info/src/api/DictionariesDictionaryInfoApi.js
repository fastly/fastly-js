/**
 * Dictionary info
 * Dictionary Info is a set of metadata describing properties of a dictionary which change as items are added and removed.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class DictionariesDictionaryInfoApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    getDictionaryInfoWithHttpInfo(serviceId, versionId, dictionaryId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getDictionaryInfo");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getDictionaryInfo");
      }
      // verify the required parameter 'dictionaryId' is set
      if (dictionaryId === undefined || dictionaryId === null) {
        throw new Error("Missing the required parameter 'dictionaryId' when calling getDictionaryInfo");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'dictionary_id': dictionaryId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary/{dictionary_id}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDictionaryInfo(serviceId, versionId, dictionaryId) {
      return this.getDictionaryInfoWithHttpInfo(serviceId, versionId, dictionaryId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
