/**
 * Response object
 * Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with [Condition](#condition) objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ResponseObject);
  }
}(this, function(expect, ResponseObject) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ResponseObject.ModelResponseObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ModelResponseObject', function() {
    it('should create an instance of ModelResponseObject', function() {
      // uncomment below and update the code to test ModelResponseObject
      //var instane = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be.a(ResponseObject.ModelResponseObject);
    });

    it('should have the property serviceId (base name: "service_id")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property cacheCondition (base name: "cache_condition")', function() {
      // uncomment below and update the code to test the property cacheCondition
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property content (base name: "content")', function() {
      // uncomment below and update the code to test the property content
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property contentType (base name: "content_type")', function() {
      // uncomment below and update the code to test the property contentType
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property response (base name: "response")', function() {
      // uncomment below and update the code to test the property response
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

    it('should have the property requestCondition (base name: "request_condition")', function() {
      // uncomment below and update the code to test the property requestCondition
      //var instance = new ResponseObject.ModelResponseObject();
      //expect(instance).to.be();
    });

  });

}));
