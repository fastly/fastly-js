/**
 * Response object
 * Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with [Condition](#condition) objects.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesResponseObjectApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createResponseObjectWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createResponseObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createResponseObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/response_object', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createResponseObject(serviceId, versionId) {
      return this.createResponseObjectWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteResponseObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteResponseObject");
      }
      // verify the required parameter 'responseObjectName' is set
      if (responseObjectName === undefined || responseObjectName === null) {
        throw new Error("Missing the required parameter 'responseObjectName' when calling deleteResponseObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'response_object_name': responseObjectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/response_object/{response_object_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteResponseObject(serviceId, versionId, responseObjectName) {
      return this.deleteResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getResponseObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getResponseObject");
      }
      // verify the required parameter 'responseObjectName' is set
      if (responseObjectName === undefined || responseObjectName === null) {
        throw new Error("Missing the required parameter 'responseObjectName' when calling getResponseObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'response_object_name': responseObjectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/response_object/{response_object_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getResponseObject(serviceId, versionId, responseObjectName) {
      return this.getResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listResponseObjectsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listResponseObjects");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listResponseObjects");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/response_object', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listResponseObjects(serviceId, versionId) {
      return this.listResponseObjectsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateResponseObject");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateResponseObject");
      }
      // verify the required parameter 'responseObjectName' is set
      if (responseObjectName === undefined || responseObjectName === null) {
        throw new Error("Missing the required parameter 'responseObjectName' when calling updateResponseObject");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'response_object_name': responseObjectName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/response_object/{response_object_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateResponseObject(serviceId, versionId, responseObjectName) {
      return this.updateResponseObjectWithHttpInfo(serviceId, versionId, responseObjectName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
