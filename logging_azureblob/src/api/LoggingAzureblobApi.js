/**
 * Microsoft Azure Blob Storage
 * Fastly will upload log messages to the Azure Blob Storage container in the format specified in the Azure Blob object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingAzureblobApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogAzureWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogAzure");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogAzure");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'message_type': opts['messageType'],
        'timestamp_format': opts['timestampFormat'],
        'period': opts['period'],
        'gzip_level': opts['gzipLevel'],
        'compression_codec': opts['compressionCodec'],
        'path': opts['path'],
        'account_name': opts['accountName'],
        'container': opts['container'],
        'sas_token': opts['sasToken'],
        'public_key': opts['publicKey'],
        'file_max_bytes': opts['fileMaxBytes']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/azureblob', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogAzure(serviceId, versionId, opts) {
      return this.createLogAzureWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLoogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLoogAzure");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLoogAzure");
      }
      // verify the required parameter 'loggingAzureblobName' is set
      if (loggingAzureblobName === undefined || loggingAzureblobName === null) {
        throw new Error("Missing the required parameter 'loggingAzureblobName' when calling deleteLoogAzure");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_azureblob_name': loggingAzureblobName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/azureblob/{logging_azureblob_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLoogAzure(serviceId, versionId, loggingAzureblobName) {
      return this.deleteLoogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogAzure");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogAzure");
      }
      // verify the required parameter 'loggingAzureblobName' is set
      if (loggingAzureblobName === undefined || loggingAzureblobName === null) {
        throw new Error("Missing the required parameter 'loggingAzureblobName' when calling getLogAzure");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_azureblob_name': loggingAzureblobName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/azureblob/{logging_azureblob_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogAzure(serviceId, versionId, loggingAzureblobName) {
      return this.getLogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogAzureWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogAzure");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogAzure");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/azureblob', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogAzure(serviceId, versionId) {
      return this.listLogAzureWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogAzure");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogAzure");
      }
      // verify the required parameter 'loggingAzureblobName' is set
      if (loggingAzureblobName === undefined || loggingAzureblobName === null) {
        throw new Error("Missing the required parameter 'loggingAzureblobName' when calling updateLogAzure");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_azureblob_name': loggingAzureblobName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/azureblob/{logging_azureblob_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogAzure(serviceId, versionId, loggingAzureblobName) {
      return this.updateLogAzureWithHttpInfo(serviceId, versionId, loggingAzureblobName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
