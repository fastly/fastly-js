/**
 * Syslog
 * Fastly will stream log messages to the location in the format specified in the Syslog object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingSyslogApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogSyslogWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogSyslog");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogSyslog");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'tls_ca_cert': opts['tlsCaCert'],
        'tls_client_cert': opts['tlsClientCert'],
        'tls_client_key': opts['tlsClientKey'],
        'tls_hostname': opts['tlsHostname'],
        'address': opts['address'],
        'port': opts['port'],
        'message_type': opts['messageType'],
        'hostname': opts['hostname'],
        'ipv4': opts['ipv4'],
        'token': opts['token'],
        'use_tls': opts['useTls']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/syslog', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogSyslog(serviceId, versionId, opts) {
      return this.createLogSyslogWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLogSyslog");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLogSyslog");
      }
      // verify the required parameter 'loggingSyslogName' is set
      if (loggingSyslogName === undefined || loggingSyslogName === null) {
        throw new Error("Missing the required parameter 'loggingSyslogName' when calling deleteLogSyslog");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_syslog_name': loggingSyslogName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/syslog/{logging_syslog_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLogSyslog(serviceId, versionId, loggingSyslogName) {
      return this.deleteLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogSyslog");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogSyslog");
      }
      // verify the required parameter 'loggingSyslogName' is set
      if (loggingSyslogName === undefined || loggingSyslogName === null) {
        throw new Error("Missing the required parameter 'loggingSyslogName' when calling getLogSyslog");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_syslog_name': loggingSyslogName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/syslog/{logging_syslog_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogSyslog(serviceId, versionId, loggingSyslogName) {
      return this.getLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogSyslogWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogSyslog");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogSyslog");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/syslog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogSyslog(serviceId, versionId) {
      return this.listLogSyslogWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogSyslog");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogSyslog");
      }
      // verify the required parameter 'loggingSyslogName' is set
      if (loggingSyslogName === undefined || loggingSyslogName === null) {
        throw new Error("Missing the required parameter 'loggingSyslogName' when calling updateLogSyslog");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_syslog_name': loggingSyslogName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'tls_ca_cert': opts['tlsCaCert'],
        'tls_client_cert': opts['tlsClientCert'],
        'tls_client_key': opts['tlsClientKey'],
        'tls_hostname': opts['tlsHostname'],
        'address': opts['address'],
        'port': opts['port'],
        'message_type': opts['messageType'],
        'hostname': opts['hostname'],
        'ipv4': opts['ipv4'],
        'token': opts['token'],
        'use_tls': opts['useTls']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/syslog/{logging_syslog_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogSyslog(serviceId, versionId, loggingSyslogName, opts) {
      return this.updateLogSyslogWithHttpInfo(serviceId, versionId, loggingSyslogName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
