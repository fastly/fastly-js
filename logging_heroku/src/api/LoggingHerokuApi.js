/**
 * Heroku
 * Fastly will stream log messages to the Heroku account in the format specified in the Heroku object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class LoggingHerokuApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createLogHerokuWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createLogHeroku");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createLogHeroku");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'token': opts['token'],
        'url': opts['url']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/heroku', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createLogHeroku(serviceId, versionId, opts) {
      return this.createLogHerokuWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteLogHeroku");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteLogHeroku");
      }
      // verify the required parameter 'loggingHerokuName' is set
      if (loggingHerokuName === undefined || loggingHerokuName === null) {
        throw new Error("Missing the required parameter 'loggingHerokuName' when calling deleteLogHeroku");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_heroku_name': loggingHerokuName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/heroku/{logging_heroku_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteLogHeroku(serviceId, versionId, loggingHerokuName) {
      return this.deleteLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getLogHeroku");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getLogHeroku");
      }
      // verify the required parameter 'loggingHerokuName' is set
      if (loggingHerokuName === undefined || loggingHerokuName === null) {
        throw new Error("Missing the required parameter 'loggingHerokuName' when calling getLogHeroku");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_heroku_name': loggingHerokuName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/heroku/{logging_heroku_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getLogHeroku(serviceId, versionId, loggingHerokuName) {
      return this.getLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listLogHerokuWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listLogHeroku");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listLogHeroku");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/heroku', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listLogHeroku(serviceId, versionId) {
      return this.listLogHerokuWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateLogHeroku");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateLogHeroku");
      }
      // verify the required parameter 'loggingHerokuName' is set
      if (loggingHerokuName === undefined || loggingHerokuName === null) {
        throw new Error("Missing the required parameter 'loggingHerokuName' when calling updateLogHeroku");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'logging_heroku_name': loggingHerokuName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'name': opts['name'],
        'placement': opts['placement'],
        'format_version': opts['formatVersion'],
        'response_condition': opts['responseCondition'],
        'format': opts['format'],
        'token': opts['token'],
        'url': opts['url']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/logging/heroku/{logging_heroku_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateLogHeroku(serviceId, versionId, loggingHerokuName, opts) {
      return this.updateLogHerokuWithHttpInfo(serviceId, versionId, loggingHerokuName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
