/**
 * Kafka
 * Fastly will upload log messages periodically to the server in the format specified in the Kafka object.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Kafka);
  }
}(this, function(expect, Kafka) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Kafka.InlineObject();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InlineObject', function() {
    it('should create an instance of InlineObject', function() {
      // uncomment below and update the code to test InlineObject
      //var instane = new Kafka.InlineObject();
      //expect(instance).to.be.a(Kafka.InlineObject);
    });

    it('should have the property createdAt (base name: "created_at")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property deletedAt (base name: "deleted_at")', function() {
      // uncomment below and update the code to test the property deletedAt
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updated_at")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property serviceId (base name: "service_id")', function() {
      // uncomment below and update the code to test the property serviceId
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property version (base name: "version")', function() {
      // uncomment below and update the code to test the property version
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property placement (base name: "placement")', function() {
      // uncomment below and update the code to test the property placement
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property formatVersion (base name: "format_version")', function() {
      // uncomment below and update the code to test the property formatVersion
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property responseCondition (base name: "response_condition")', function() {
      // uncomment below and update the code to test the property responseCondition
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property format (base name: "format")', function() {
      // uncomment below and update the code to test the property format
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property tlsCaCert (base name: "tls_ca_cert")', function() {
      // uncomment below and update the code to test the property tlsCaCert
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property tlsClientCert (base name: "tls_client_cert")', function() {
      // uncomment below and update the code to test the property tlsClientCert
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property tlsClientKey (base name: "tls_client_key")', function() {
      // uncomment below and update the code to test the property tlsClientKey
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property tlsHostname (base name: "tls_hostname")', function() {
      // uncomment below and update the code to test the property tlsHostname
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property topic (base name: "topic")', function() {
      // uncomment below and update the code to test the property topic
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property brokers (base name: "brokers")', function() {
      // uncomment below and update the code to test the property brokers
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property compressionCodec (base name: "compression_codec")', function() {
      // uncomment below and update the code to test the property compressionCodec
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property requiredAcks (base name: "required_acks")', function() {
      // uncomment below and update the code to test the property requiredAcks
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property requestMaxBytes (base name: "request_max_bytes")', function() {
      // uncomment below and update the code to test the property requestMaxBytes
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property parseLogKeyvals (base name: "parse_log_keyvals")', function() {
      // uncomment below and update the code to test the property parseLogKeyvals
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property authMethod (base name: "auth_method")', function() {
      // uncomment below and update the code to test the property authMethod
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property user (base name: "user")', function() {
      // uncomment below and update the code to test the property user
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property password (base name: "password")', function() {
      // uncomment below and update the code to test the property password
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

    it('should have the property useTls (base name: "use_tls")', function() {
      // uncomment below and update the code to test the property useTls
      //var instance = new Kafka.InlineObject();
      //expect(instance).to.be();
    });

  });

}));
