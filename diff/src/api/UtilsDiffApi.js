/**
 * Diff
 * See the changes in configuration between two different versions of a service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class UtilsDiffApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    diffServiceVersionsWithHttpInfo(serviceId, fromVersionId, toVersionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling diffServiceVersions");
      }
      // verify the required parameter 'fromVersionId' is set
      if (fromVersionId === undefined || fromVersionId === null) {
        throw new Error("Missing the required parameter 'fromVersionId' when calling diffServiceVersions");
      }
      // verify the required parameter 'toVersionId' is set
      if (toVersionId === undefined || toVersionId === null) {
        throw new Error("Missing the required parameter 'toVersionId' when calling diffServiceVersions");
      }

      let pathParams = {
        'service_id': serviceId,
        'from_version_id': fromVersionId,
        'to_version_id': toVersionId
      };
      let queryParams = {
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['session_or_token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/diff/from/{from_version_id}/to/{to_version_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    diffServiceVersions(serviceId, fromVersionId, toVersionId, opts) {
      return this.diffServiceVersionsWithHttpInfo(serviceId, fromVersionId, toVersionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
