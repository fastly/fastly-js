/**
 * VCL Snippets
 * VCL Snippets are blocks of VCL logic inserted into your service's configuration that don't require custom VCL.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesSnippetApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createSnippetWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createSnippet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createSnippet");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createSnippet(serviceId, versionId) {
      return this.createSnippetWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteSnippetWithHttpInfo(serviceId, versionId, snippetName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteSnippet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteSnippet");
      }
      // verify the required parameter 'snippetName' is set
      if (snippetName === undefined || snippetName === null) {
        throw new Error("Missing the required parameter 'snippetName' when calling deleteSnippet");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'snippet_name': snippetName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteSnippet(serviceId, versionId, snippetName) {
      return this.deleteSnippetWithHttpInfo(serviceId, versionId, snippetName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getSnippetWithHttpInfo(serviceId, versionId, snippetName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getSnippet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getSnippet");
      }
      // verify the required parameter 'snippetName' is set
      if (snippetName === undefined || snippetName === null) {
        throw new Error("Missing the required parameter 'snippetName' when calling getSnippet");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'snippet_name': snippetName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getSnippet(serviceId, versionId, snippetName) {
      return this.getSnippetWithHttpInfo(serviceId, versionId, snippetName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getSnippetDynamicWithHttpInfo(serviceId, snippetId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getSnippetDynamic");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling getSnippetDynamic");
      }

      let pathParams = {
        'service_id': serviceId,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/snippet/{snippet_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getSnippetDynamic(serviceId, snippetId) {
      return this.getSnippetDynamicWithHttpInfo(serviceId, snippetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listSnippetsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listSnippets");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listSnippets");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listSnippets(serviceId, versionId) {
      return this.listSnippetsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateSnippetWithHttpInfo(serviceId, versionId, snippetName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateSnippet");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateSnippet");
      }
      // verify the required parameter 'snippetName' is set
      if (snippetName === undefined || snippetName === null) {
        throw new Error("Missing the required parameter 'snippetName' when calling updateSnippet");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'snippet_name': snippetName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/snippet/{snippet_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateSnippet(serviceId, versionId, snippetName) {
      return this.updateSnippetWithHttpInfo(serviceId, versionId, snippetName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateSnippetDynamicWithHttpInfo(serviceId, snippetId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateSnippetDynamic");
      }
      // verify the required parameter 'snippetId' is set
      if (snippetId === undefined || snippetId === null) {
        throw new Error("Missing the required parameter 'snippetId' when calling updateSnippetDynamic");
      }

      let pathParams = {
        'service_id': serviceId,
        'snippet_id': snippetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/service/{service_id}/snippet/{snippet_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateSnippetDynamic(serviceId, snippetId) {
      return this.updateSnippetDynamicWithHttpInfo(serviceId, snippetId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
