/**
 * Dictionary
 * A Dictionary is a VCL data table that stores key-value pairs accessible to VCL during request processing. New, empty dictionaries can be attached to a draft version of a service, which must be activated for the dictionary to be included in VCL. Once installed, a dictionary's items may be updated via API calls without having to activate a new version of the associated service configuration. To remove a dictionary, delete it on a draft version of a service (one that is not locked and not active). Once removed, activate the draft service version without the dictionary.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineResponse200 from '../model/InlineResponse200';


export default class DictionariesDictionaryApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createDictionaryWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createDictionary");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createDictionary");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'created_at': opts['createdAt'],
        'deleted_at': opts['deletedAt'],
        'updated_at': opts['updatedAt'],
        'id': opts['id'],
        'name': opts['name'],
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'write_only': opts['writeOnly']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createDictionary(serviceId, versionId, opts) {
      return this.createDictionaryWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteDictionaryWithHttpInfo(serviceId, versionId, dictionaryName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteDictionary");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteDictionary");
      }
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName === undefined || dictionaryName === null) {
        throw new Error("Missing the required parameter 'dictionaryName' when calling deleteDictionary");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'dictionary_name': dictionaryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary/{dictionary_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteDictionary(serviceId, versionId, dictionaryName) {
      return this.deleteDictionaryWithHttpInfo(serviceId, versionId, dictionaryName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getDictionaryWithHttpInfo(serviceId, versionId, dictionaryName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getDictionary");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getDictionary");
      }
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName === undefined || dictionaryName === null) {
        throw new Error("Missing the required parameter 'dictionaryName' when calling getDictionary");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'dictionary_name': dictionaryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary/{dictionary_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getDictionary(serviceId, versionId, dictionaryName) {
      return this.getDictionaryWithHttpInfo(serviceId, versionId, dictionaryName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listDictionariesWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listDictionaries");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listDictionaries");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listDictionaries(serviceId, versionId) {
      return this.listDictionariesWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateDictionaryWithHttpInfo(serviceId, versionId, dictionaryName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateDictionary");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateDictionary");
      }
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName === undefined || dictionaryName === null) {
        throw new Error("Missing the required parameter 'dictionaryName' when calling updateDictionary");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'dictionary_name': dictionaryName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/dictionary/{dictionary_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateDictionary(serviceId, versionId, dictionaryName) {
      return this.updateDictionaryWithHttpInfo(serviceId, versionId, dictionaryName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
