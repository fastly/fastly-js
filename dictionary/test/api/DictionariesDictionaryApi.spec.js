/**
 * Dictionary
 * A Dictionary is a VCL data table that stores key-value pairs accessible to VCL during request processing. New, empty dictionaries can be attached to a draft version of a service, which must be activated for the dictionary to be included in VCL. Once installed, a dictionary's items may be updated via API calls without having to activate a new version of the associated service configuration. To remove a dictionary, delete it on a draft version of a service (one that is not locked and not active). Once removed, activate the draft service version without the dictionary.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Dictionary);
  }
}(this, function(expect, Dictionary) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Dictionary.DictionariesDictionaryApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DictionariesDictionaryApi', function() {
    describe('createDictionary', function() {
      it('should call createDictionary successfully', function(done) {
        //uncomment below and update the code to test createDictionary
        //instance.createDictionary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDictionary', function() {
      it('should call deleteDictionary successfully', function(done) {
        //uncomment below and update the code to test deleteDictionary
        //instance.deleteDictionary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getDictionary', function() {
      it('should call getDictionary successfully', function(done) {
        //uncomment below and update the code to test getDictionary
        //instance.getDictionary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDictionaries', function() {
      it('should call listDictionaries successfully', function(done) {
        //uncomment below and update the code to test listDictionaries
        //instance.listDictionaries(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDictionary', function() {
      it('should call updateDictionary successfully', function(done) {
        //uncomment below and update the code to test updateDictionary
        //instance.updateDictionary(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
