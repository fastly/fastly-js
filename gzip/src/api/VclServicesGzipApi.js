/**
 * Gzip
 * Gzip configuration allows you to choose resources to automatically compress.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import InlineObject from '../model/InlineObject';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';


export default class VclServicesGzipApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createGzipConfigWithHttpInfo(serviceId, versionId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling createGzipConfig");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling createGzipConfig");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'cache_condition': opts['cacheCondition'],
        'content_types': opts['contentTypes'],
        'extensions': opts['extensions'],
        'name': opts['name']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/gzip', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createGzipConfig(serviceId, versionId, opts) {
      return this.createGzipConfigWithHttpInfo(serviceId, versionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    deleteGzipConfigWithHttpInfo(serviceId, versionId, gzipName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling deleteGzipConfig");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling deleteGzipConfig");
      }
      // verify the required parameter 'gzipName' is set
      if (gzipName === undefined || gzipName === null) {
        throw new Error("Missing the required parameter 'gzipName' when calling deleteGzipConfig");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'gzip_name': gzipName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/gzip/{gzip_name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    deleteGzipConfig(serviceId, versionId, gzipName) {
      return this.deleteGzipConfigWithHttpInfo(serviceId, versionId, gzipName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getGzipConfigsWithHttpInfo(serviceId, versionId, gzipName) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling getGzipConfigs");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling getGzipConfigs");
      }
      // verify the required parameter 'gzipName' is set
      if (gzipName === undefined || gzipName === null) {
        throw new Error("Missing the required parameter 'gzipName' when calling getGzipConfigs");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'gzip_name': gzipName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineObject;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/gzip/{gzip_name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getGzipConfigs(serviceId, versionId, gzipName) {
      return this.getGzipConfigsWithHttpInfo(serviceId, versionId, gzipName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    listGzipConfigsWithHttpInfo(serviceId, versionId) {
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling listGzipConfigs");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling listGzipConfigs");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['token_engineer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse200];
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/gzip', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    listGzipConfigs(serviceId, versionId) {
      return this.listGzipConfigsWithHttpInfo(serviceId, versionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    updateGzipConfigWithHttpInfo(serviceId, versionId, gzipName, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serviceId' is set
      if (serviceId === undefined || serviceId === null) {
        throw new Error("Missing the required parameter 'serviceId' when calling updateGzipConfig");
      }
      // verify the required parameter 'versionId' is set
      if (versionId === undefined || versionId === null) {
        throw new Error("Missing the required parameter 'versionId' when calling updateGzipConfig");
      }
      // verify the required parameter 'gzipName' is set
      if (gzipName === undefined || gzipName === null) {
        throw new Error("Missing the required parameter 'gzipName' when calling updateGzipConfig");
      }

      let pathParams = {
        'service_id': serviceId,
        'version_id': versionId,
        'gzip_name': gzipName
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'service_id': opts['serviceId2'],
        'version': opts['version'],
        'cache_condition': opts['cacheCondition'],
        'content_types': opts['contentTypes'],
        'extensions': opts['extensions'],
        'name': opts['name']
      };

      let authNames = ['token_engineer'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = InlineObject1;
      return this.apiClient.callApi(
        '/service/{service_id}/version/{version_id}/gzip/{gzip_name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    updateGzipConfig(serviceId, versionId, gzipName, opts) {
      return this.updateGzipConfigWithHttpInfo(serviceId, versionId, gzipName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
